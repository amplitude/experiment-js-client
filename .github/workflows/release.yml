name: Release

on:
  workflow_dispatch:
    inputs:
      dryRun:
        description: 'Do a dry run to preview instead of a real release'
        required: true
        default: 'true'

jobs:
  authorize:
    name: Authorize
    runs-on: ubuntu-latest
    steps:
      - name: ${{ github.actor }} permission check
        uses: 'lannonbr/repo-permission-check-action@2.0.2'
        with:
          permission: 'write'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    needs: [authorize]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Needed for lerna version to determine last tag
      - name: Fetch
        run: git fetch --prune --unshallow --tags

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up SSH for deploy key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DOM_MUTATOR_ACCESS_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
        continue-on-error: true # forked repos don't have access, and this is only for experiment-tag
        shell: bash

      - name: Install
        run: yarn install --frozen-lockfile

      - name: Build
        run: npx lerna exec yarn

      - name: Test
        run: yarn test

      - name: Configure Git User
        run: |
          git config --global user.name amplitude-sdk-bot
          git config --global user.email amplitude-sdk-bot@users.noreply.github.com

      - name: Release (Dry Run)
        if: ${{ github.event.inputs.dryRun == 'true'}}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn lerna version --no-push --no-git-tag-version --loglevel silly --yes

      - name: Setup NPM Token
        if: ${{ github.event.inputs.dryRun == 'false'}}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} > .npmrc

      - name: Release
        if: ${{ github.event.inputs.dryRun == 'false'}}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          yarn lerna version --yes
          yarn lerna publish from-git --yes --loglevel silly

      # Check if experiment-tag was updated
      - name: Check if experiment-tag was updated
        id: check-experiment-tag
        if: ${{ github.event.inputs.dryRun == 'false'}}
        run: |
          UPDATED_PACKAGES=$(git diff --name-only HEAD~1 HEAD | grep "packages/experiment-tag/")
          if [ -n "$UPDATED_PACKAGES" ]; then
            echo "experiment_tag_updated=true" >> $GITHUB_OUTPUT
          else
            echo "experiment_tag_updated=false" >> $GITHUB_OUTPUT
          fi

      # Check if experiment-plugin-segment was updated
      - name: Check if experiment-plugin-segment was updated
        id: check-experiment-plugin
        if: ${{ github.event.inputs.dryRun == 'false'}}
        run: |
          UPDATED_PACKAGES=$(git diff --name-only HEAD~1 HEAD | grep "packages/plugin-segment/")
          if [ -n "$UPDATED_PACKAGES" ]; then
            echo "experiment_plugin_updated=true" >> $GITHUB_OUTPUT
          else
            echo "experiment_plugin_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Install AWS SDK dependencies
        run: cd scripts && yarn install

      # Configure AWS credentials for S3 upload
      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.dryRun == 'false' && (steps.check-experiment-tag.outputs.experiment_tag_updated == 'true' || steps.check-experiment-plugin.outputs.experiment_plugin_updated == 'true') }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-west-2

      # Upload experiment packages to S3 after version and docs are updated
      - name: Upload experiment packages to S3
        if: ${{ github.event.inputs.dryRun == 'false' && (steps.check-experiment-tag.outputs.experiment_tag_updated == 'true' || steps.check-experiment-plugin.outputs.experiment_plugin_updated == 'true') }}
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          PACKAGES: ${{ steps.check-experiment-tag.outputs.experiment_tag_updated == 'true' && steps.check-experiment-plugin.outputs.experiment_plugin_updated == 'true' && 'tag,segment-plugin' || steps.check-experiment-tag.outputs.experiment_tag_updated == 'true' && 'tag' || 'segment-plugin' }}
        run: node scripts/upload-to-s3.js
