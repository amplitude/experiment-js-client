diff --git a/node_modules/dom-mutator/dist/dom-mutator.cjs.development.js b/node_modules/dom-mutator/dist/dom-mutator.cjs.development.js
index d778c26..c129e02 100644
--- a/node_modules/dom-mutator/dist/dom-mutator.cjs.development.js
+++ b/node_modules/dom-mutator/dist/dom-mutator.cjs.development.js
@@ -1,14 +1,11 @@
 'use strict';

-Object.defineProperty(exports, '__esModule', { value: true });
-
 var validAttributeName = /^[a-zA-Z:_][a-zA-Z0-9:_.-]*$/;
 var nullController = {
   revert: function revert() {}
 };
 var elements = /*#__PURE__*/new Map();
 var mutations = /*#__PURE__*/new Set();
-
 function getObserverInit(attr) {
   return attr === 'html' ? {
     childList: true,
@@ -22,10 +19,8 @@ function getObserverInit(attr) {
     attributeFilter: [attr]
   };
 }
-
 function getElementRecord(element) {
   var record = elements.get(element);
-
   if (!record) {
     record = {
       element: element,
@@ -33,10 +28,8 @@ function getElementRecord(element) {
     };
     elements.set(element, record);
   }
-
   return record;
 }
-
 function createElementPropertyRecord(el, attr, getCurrentValue, setValue, mutationRunner) {
   var currentValue = getCurrentValue(el);
   var record = {
@@ -46,14 +39,18 @@ function createElementPropertyRecord(el, attr, getCurrentValue, setValue, mutati
     mutations: [],
     el: el,
     _positionTimeout: null,
+    _textTimeout: null,
     observer: new MutationObserver(function () {
       // enact a 1 second timeout that blocks subsequent firing of the
       // observer until the timeout is complete. This will prevent multiple
       // mutations from firing in quick succession, which can cause the
       // mutation to be reverted before the DOM has a chance to update.
       if (paused) return;
-      if (attr === 'position' && record._positionTimeout) return;else if (attr === 'position') record._positionTimeout = setTimeout(function () {
+      if (attr === 'position' && record._positionTimeout) return;
+      if (attr === 'html' && record._textTimeout) return;else if (attr === 'position') record._positionTimeout = setTimeout(function () {
         record._positionTimeout = null;
+      }, 1000);else if (attr === 'html') record._textTimeout = setTimeout(function () {
+        record._textTimeout = null;
       }, 1000);
       var currentValue = getCurrentValue(el);
       if (attr === 'position' && currentValue.parentNode === record.virtualValue.parentNode && currentValue.insertBeforeNode === record.virtualValue.insertBeforeNode) return;
@@ -65,7 +62,6 @@ function createElementPropertyRecord(el, attr, getCurrentValue, setValue, mutati
     setValue: setValue,
     getCurrentValue: getCurrentValue
   };
-
   if (attr === 'position' && el.parentNode) {
     record.observer.observe(el.parentNode, {
       childList: true,
@@ -76,14 +72,11 @@ function createElementPropertyRecord(el, attr, getCurrentValue, setValue, mutati
   } else {
     record.observer.observe(el, getObserverInit(attr));
   }
-
   return record;
 }
-
 function queueIfNeeded(val, record) {
   var currentVal = record.getCurrentValue(record.el);
   record.virtualValue = val;
-
   if (val && typeof val !== 'string') {
     if (!currentVal || val.parentNode !== currentVal.parentNode || val.insertBeforeNode !== currentVal.insertBeforeNode) {
       record.isDirty = true;
@@ -94,7 +87,6 @@ function queueIfNeeded(val, record) {
     runDOMUpdates();
   }
 }
-
 function htmlMutationRunner(record) {
   var val = record.originalValue;
   record.mutations.forEach(function (m) {
@@ -102,7 +94,6 @@ function htmlMutationRunner(record) {
   });
   queueIfNeeded(getTransformedHTML(val), record);
 }
-
 function classMutationRunner(record) {
   var val = new Set(record.originalValue.split(/\s+/).filter(Boolean));
   record.mutations.forEach(function (m) {
@@ -110,7 +101,6 @@ function classMutationRunner(record) {
   });
   queueIfNeeded(Array.from(val).filter(Boolean).join(' '), record);
 }
-
 function attrMutationRunner(record) {
   var val = record.originalValue;
   record.mutations.forEach(function (m) {
@@ -118,10 +108,9 @@ function attrMutationRunner(record) {
   });
   queueIfNeeded(val, record);
 }
-
 function _loadDOMNodes(_ref) {
   var parentSelector = _ref.parentSelector,
-      insertBeforeSelector = _ref.insertBeforeSelector;
+    insertBeforeSelector = _ref.insertBeforeSelector;
   var parentNode = document.querySelector(parentSelector);
   if (!parentNode) return null;
   var insertBeforeNode = insertBeforeSelector ? document.querySelector(insertBeforeSelector) : null;
@@ -131,156 +120,118 @@ function _loadDOMNodes(_ref) {
     insertBeforeNode: insertBeforeNode
   };
 }
-
 function positionMutationRunner(record) {
   var val = record.originalValue;
   record.mutations.forEach(function (m) {
     var selectors = m.mutate();
-
     var newNodes = _loadDOMNodes(selectors);
-
     val = newNodes || val;
   });
   queueIfNeeded(val, record);
 }
-
 var getHTMLValue = function getHTMLValue(el) {
   return el.innerHTML;
 };
-
 var setHTMLValue = function setHTMLValue(el, value) {
   return el.innerHTML = value;
 };
-
 function getElementHTMLRecord(element) {
   var elementRecord = getElementRecord(element);
-
   if (!elementRecord.html) {
     elementRecord.html = createElementPropertyRecord(element, 'html', getHTMLValue, setHTMLValue, htmlMutationRunner);
   }
-
   return elementRecord.html;
 }
-
 var getElementPosition = function getElementPosition(el) {
   return {
     parentNode: el.parentElement,
     insertBeforeNode: el.nextElementSibling
   };
 };
-
 var setElementPosition = function setElementPosition(el, value) {
   if (value.insertBeforeNode && !value.parentNode.contains(value.insertBeforeNode)) {
     // skip position mutation - insertBeforeNode not a child of parent. happens
     // when mutation observer for indvidual element fires out of order
     return;
   }
-
   value.parentNode.insertBefore(el, value.insertBeforeNode);
 };
-
 function getElementPositionRecord(element) {
   var elementRecord = getElementRecord(element);
-
   if (!elementRecord.position) {
     elementRecord.position = createElementPropertyRecord(element, 'position', getElementPosition, setElementPosition, positionMutationRunner);
   }
-
   return elementRecord.position;
 }
-
 var setClassValue = function setClassValue(el, val) {
   return val ? el.className = val : el.removeAttribute('class');
 };
-
 var getClassValue = function getClassValue(el) {
   return el.className;
 };
-
 function getElementClassRecord(el) {
   var elementRecord = getElementRecord(el);
-
   if (!elementRecord.classes) {
     elementRecord.classes = createElementPropertyRecord(el, 'class', getClassValue, setClassValue, classMutationRunner);
   }
-
   return elementRecord.classes;
 }
-
 var getAttrValue = function getAttrValue(attrName) {
   return function (el) {
     var _el$getAttribute;
-
     return (_el$getAttribute = el.getAttribute(attrName)) != null ? _el$getAttribute : null;
   };
 };
-
 var setAttrValue = function setAttrValue(attrName) {
   return function (el, val) {
     return val !== null ? el.setAttribute(attrName, val) : el.removeAttribute(attrName);
   };
 };
-
 function getElementAttributeRecord(el, attr) {
   var elementRecord = getElementRecord(el);
-
   if (!elementRecord.attributes[attr]) {
     elementRecord.attributes[attr] = createElementPropertyRecord(el, attr, getAttrValue(attr), setAttrValue(attr), attrMutationRunner);
   }
-
   return elementRecord.attributes[attr];
 }
-
 function deleteElementPropertyRecord(el, attr) {
   var element = elements.get(el);
   if (!element) return;
-
   if (attr === 'html') {
-    var _element$html, _element$html$observe;
-
-    (_element$html = element.html) == null ? void 0 : (_element$html$observe = _element$html.observer) == null ? void 0 : _element$html$observe.disconnect();
+    var _element$html;
+    (_element$html = element.html) == null || (_element$html = _element$html.observer) == null || _element$html.disconnect();
     delete element.html;
   } else if (attr === 'class') {
-    var _element$classes, _element$classes$obse;
-
-    (_element$classes = element.classes) == null ? void 0 : (_element$classes$obse = _element$classes.observer) == null ? void 0 : _element$classes$obse.disconnect();
+    var _element$classes;
+    (_element$classes = element.classes) == null || (_element$classes = _element$classes.observer) == null || _element$classes.disconnect();
     delete element.classes;
   } else if (attr === 'position') {
-    var _element$position, _element$position$obs;
-
-    (_element$position = element.position) == null ? void 0 : (_element$position$obs = _element$position.observer) == null ? void 0 : _element$position$obs.disconnect();
+    var _element$position;
+    (_element$position = element.position) == null || (_element$position = _element$position.observer) == null || _element$position.disconnect();
     delete element.position;
   } else {
-    var _element$attributes, _element$attributes$a, _element$attributes$a2;
-
-    (_element$attributes = element.attributes) == null ? void 0 : (_element$attributes$a = _element$attributes[attr]) == null ? void 0 : (_element$attributes$a2 = _element$attributes$a.observer) == null ? void 0 : _element$attributes$a2.disconnect();
+    var _element$attributes;
+    (_element$attributes = element.attributes) == null || (_element$attributes = _element$attributes[attr]) == null || (_element$attributes = _element$attributes.observer) == null || _element$attributes.disconnect();
     delete element.attributes[attr];
   }
 }
-
 var transformContainer;
-
 function getTransformedHTML(html) {
   if (!transformContainer) {
     transformContainer = document.createElement('div');
   }
-
   transformContainer.innerHTML = html;
   return transformContainer.innerHTML;
 }
-
 function setPropertyValue(el, attr, m) {
   if (!m.isDirty) return;
   m.isDirty = false;
   var val = m.virtualValue;
-
   if (!m.mutations.length) {
     deleteElementPropertyRecord(el, attr);
   }
-
   m.setValue(el, val);
 }
-
 function setValue(m, el) {
   m.html && setPropertyValue(el, 'html', m.html);
   m.classes && setPropertyValue(el, 'class', m.classes);
@@ -289,15 +240,12 @@ function setValue(m, el) {
     setPropertyValue(el, attr, m.attributes[attr]);
   });
 }
-
 function runDOMUpdates() {
   elements.forEach(setValue);
-} // find or create ElementPropertyRecord, add mutation to it, then run
-
-
+}
+// find or create ElementPropertyRecord, add mutation to it, then run
 function startMutating(mutation, element) {
   var record = null;
-
   if (mutation.kind === 'html') {
     record = getElementHTMLRecord(element);
   } else if (mutation.kind === 'class') {
@@ -307,16 +255,13 @@ function startMutating(mutation, element) {
   } else if (mutation.kind === 'position') {
     record = getElementPositionRecord(element);
   }
-
   if (!record) return;
   record.mutations.push(mutation);
   record.mutationRunner(record);
-} // get (existing) ElementPropertyRecord, remove mutation from it, then run
-
-
+}
+// get (existing) ElementPropertyRecord, remove mutation from it, then run
 function stopMutating(mutation, el) {
   var record = null;
-
   if (mutation.kind === 'html') {
     record = getElementHTMLRecord(el);
   } else if (mutation.kind === 'class') {
@@ -326,14 +271,12 @@ function stopMutating(mutation, el) {
   } else if (mutation.kind === 'position') {
     record = getElementPositionRecord(el);
   }
-
   if (!record) return;
   var index = record.mutations.indexOf(mutation);
   if (index !== -1) record.mutations.splice(index, 1);
   record.mutationRunner(record);
-} // maintain list of elements associated with mutation
-
-
+}
+// maintain list of elements associated with mutation
 function refreshElementsSet(mutation) {
   // if a position mutation has already found an element to move, don't move
   // any more elements
@@ -347,7 +290,6 @@ function refreshElementsSet(mutation) {
     }
   });
 }
-
 function revertMutation(mutation) {
   mutation.elements.forEach(function (el) {
     return stopMutating(mutation, el);
@@ -355,12 +297,10 @@ function revertMutation(mutation) {
   mutation.elements.clear();
   mutations["delete"](mutation);
 }
-
 function refreshAllElementSets() {
   mutations.forEach(refreshElementsSet);
-} // pause/resume global observer
-
-
+}
+// pause/resume global observer
 var paused = false;
 function pauseGlobalObserver() {
   paused = true;
@@ -371,21 +311,19 @@ function isGlobalObserverPaused() {
 function resumeGlobalObserver() {
   paused = false;
   refreshAllElementSets();
-} // Observer for elements that don't exist in the DOM yet
-
+}
+// Observer for elements that don't exist in the DOM yet
 var observer;
 function disconnectGlobalObserver() {
   observer && observer.disconnect();
 }
 function connectGlobalObserver() {
   if (typeof document === 'undefined') return;
-
   if (!observer) {
     observer = new MutationObserver(function () {
       refreshAllElementSets();
     });
   }
-
   refreshAllElementSets();
   observer.observe(document.documentElement, {
     childList: true,
@@ -393,8 +331,8 @@ function connectGlobalObserver() {
     attributes: false,
     characterData: false
   });
-} // run on init
-
+}
+// run on init
 connectGlobalObserver();
 var getHtmlMutationRecordsFromSelector = function getHtmlMutationRecordsFromSelector(selector) {
   var elements = document.querySelectorAll(selector);
@@ -405,13 +343,12 @@ var getHtmlMutationRecordsFromSelector = function getHtmlMutationRecordsFromSele
   });
   return records;
 };
-
 function newMutation(m) {
   // Not in a browser
-  if (typeof document === 'undefined') return nullController; // add to global index of mutations
-
-  mutations.add(m); // run refresh on init to establish list of elements associated w/ mutation
-
+  if (typeof document === 'undefined') return nullController;
+  // add to global index of mutations
+  mutations.add(m);
+  // run refresh on init to establish list of elements associated w/ mutation
   refreshElementsSet(m);
   return {
     revert: function revert() {
@@ -419,7 +356,6 @@ function newMutation(m) {
     }
   };
 }
-
 function html(selector, mutate) {
   return newMutation({
     kind: 'html',
@@ -428,7 +364,6 @@ function html(selector, mutate) {
     selector: selector
   });
 }
-
 function position(selector, mutate) {
   return newMutation({
     kind: 'position',
@@ -437,7 +372,6 @@ function position(selector, mutate) {
     selector: selector
   });
 }
-
 function classes(selector, mutate) {
   return newMutation({
     kind: 'class',
@@ -446,10 +380,8 @@ function classes(selector, mutate) {
     selector: selector
   });
 }
-
 function attribute(selector, attribute, mutate) {
   if (!validAttributeName.test(attribute)) return nullController;
-
   if (attribute === 'class' || attribute === 'className') {
     return classes(selector, function (classnames) {
       var mutatedClassnames = mutate(Array.from(classnames).join(' '));
@@ -460,7 +392,6 @@ function attribute(selector, attribute, mutate) {
       });
     });
   }
-
   return newMutation({
     kind: 'attribute',
     attribute: attribute,
@@ -469,15 +400,13 @@ function attribute(selector, attribute, mutate) {
     selector: selector
   });
 }
-
 function declarative(_ref2) {
   var selector = _ref2.selector,
-      action = _ref2.action,
-      value = _ref2.value,
-      attr = _ref2.attribute,
-      parentSelector = _ref2.parentSelector,
-      insertBeforeSelector = _ref2.insertBeforeSelector;
-
+    action = _ref2.action,
+    value = _ref2.value,
+    attr = _ref2.attribute,
+    parentSelector = _ref2.parentSelector,
+    insertBeforeSelector = _ref2.insertBeforeSelector;
   if (attr === 'html') {
     if (action === 'append') {
       return html(selector, function (val) {
@@ -527,10 +456,8 @@ function declarative(_ref2) {
       });
     }
   }
-
   return nullController;
 }
-
 var index = {
   html: html,
   classes: classes,
diff --git a/node_modules/dom-mutator/dist/dom-mutator.cjs.development.js.map b/node_modules/dom-mutator/dist/dom-mutator.cjs.development.js.map
index 3872e0d..a523cd7 100644
--- a/node_modules/dom-mutator/dist/dom-mutator.cjs.development.js.map
+++ b/node_modules/dom-mutator/dist/dom-mutator.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"dom-mutator.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["export const validAttributeName = /^[a-zA-Z:_][a-zA-Z0-9:_.-]*$/;\nconst nullController: MutationController = {\n  revert: () => {},\n};\n\nconst elements: Map<Element, ElementRecord> = new Map();\nconst mutations: Set<Mutation> = new Set();\n\nfunction getObserverInit(attr: string): MutationObserverInit {\n  return attr === 'html'\n    ? {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        characterData: true,\n      }\n    : {\n        childList: false,\n        subtree: false,\n        attributes: true,\n        attributeFilter: [attr],\n      };\n}\n\nfunction getElementRecord(element: Element): ElementRecord {\n  let record = elements.get(element);\n\n  if (!record) {\n    record = { element, attributes: {} };\n    elements.set(element, record);\n  }\n\n  return record;\n}\nfunction createElementPropertyRecord(\n  el: Element,\n  attr: string,\n  getCurrentValue: (el: Element) => any,\n  setValue: (el: Element, val: any) => void,\n  mutationRunner: (record: ElementPropertyRecord<any, any>) => void\n) {\n  const currentValue = getCurrentValue(el);\n  const record: ElementPropertyRecord<any, any> = {\n    isDirty: false,\n    originalValue: currentValue,\n    virtualValue: currentValue,\n    mutations: [],\n    el,\n    _positionTimeout: null,\n    observer: new MutationObserver(() => {\n      // enact a 1 second timeout that blocks subsequent firing of the\n      // observer until the timeout is complete. This will prevent multiple\n      // mutations from firing in quick succession, which can cause the\n      // mutation to be reverted before the DOM has a chance to update.\n      if (paused) return;\n      if (attr === 'position' && record._positionTimeout) return;\n      else if (attr === 'position')\n        record._positionTimeout = setTimeout(() => {\n          record._positionTimeout = null;\n        }, 1000);\n\n      const currentValue = getCurrentValue(el);\n      if (\n        attr === 'position' &&\n        currentValue.parentNode === record.virtualValue.parentNode &&\n        currentValue.insertBeforeNode === record.virtualValue.insertBeforeNode\n      )\n        return;\n      if (currentValue === record.virtualValue) return;\n      record.originalValue = currentValue;\n      mutationRunner(record);\n    }),\n    mutationRunner,\n    setValue,\n    getCurrentValue,\n  };\n  if (attr === 'position' && el.parentNode) {\n    record.observer.observe(el.parentNode, {\n      childList: true,\n      subtree: true,\n      attributes: false,\n      characterData: false,\n    });\n  } else {\n    record.observer.observe(el, getObserverInit(attr));\n  }\n  return record;\n}\n\nfunction queueIfNeeded(\n  val: string | null | ElementPositionWithDomNode,\n  record: ElementPropertyRecord<any, any>\n) {\n  const currentVal = record.getCurrentValue(record.el);\n  record.virtualValue = val;\n  if (val && typeof val !== 'string') {\n    if (\n      !currentVal ||\n      val.parentNode !== currentVal.parentNode ||\n      val.insertBeforeNode !== currentVal.insertBeforeNode\n    ) {\n      record.isDirty = true;\n      runDOMUpdates();\n    }\n  } else if (val !== currentVal) {\n    record.isDirty = true;\n    runDOMUpdates();\n  }\n}\n\nfunction htmlMutationRunner(record: HTMLRecord) {\n  let val = record.originalValue;\n  record.mutations.forEach(m => (val = m.mutate(val)));\n  queueIfNeeded(getTransformedHTML(val), record);\n}\nfunction classMutationRunner(record: ClassnameRecord) {\n  const val = new Set(record.originalValue.split(/\\s+/).filter(Boolean));\n  record.mutations.forEach(m => m.mutate(val));\n  queueIfNeeded(\n    Array.from(val)\n      .filter(Boolean)\n      .join(' '),\n    record\n  );\n}\n\nfunction attrMutationRunner(record: AttributeRecord) {\n  let val: string | null = record.originalValue;\n  record.mutations.forEach(m => (val = m.mutate(val)));\n  queueIfNeeded(val, record);\n}\n\nfunction _loadDOMNodes({\n  parentSelector,\n  insertBeforeSelector,\n}: ElementPosition): ElementPositionWithDomNode | null {\n  const parentNode = document.querySelector<HTMLElement>(parentSelector);\n  if (!parentNode) return null;\n  const insertBeforeNode = insertBeforeSelector\n    ? document.querySelector<HTMLElement>(insertBeforeSelector)\n    : null;\n  if (insertBeforeSelector && !insertBeforeNode) return null;\n  return {\n    parentNode,\n    insertBeforeNode,\n  };\n}\n\nfunction positionMutationRunner(record: PositionRecord) {\n  let val = record.originalValue;\n  record.mutations.forEach(m => {\n    const selectors = m.mutate();\n    const newNodes = _loadDOMNodes(selectors);\n    val = newNodes || val;\n  });\n  queueIfNeeded(val, record);\n}\n\nconst getHTMLValue = (el: Element) => el.innerHTML;\nconst setHTMLValue = (el: Element, value: string) => (el.innerHTML = value);\nfunction getElementHTMLRecord(element: Element): HTMLRecord {\n  const elementRecord = getElementRecord(element);\n  if (!elementRecord.html) {\n    elementRecord.html = createElementPropertyRecord(\n      element,\n      'html',\n      getHTMLValue,\n      setHTMLValue,\n      htmlMutationRunner\n    );\n  }\n  return elementRecord.html;\n}\n\nconst getElementPosition = (el: Element): ElementPositionWithDomNode => {\n  return {\n    parentNode: el.parentElement as HTMLElement,\n    insertBeforeNode: el.nextElementSibling as HTMLElement | null,\n  };\n};\nconst setElementPosition = (el: Element, value: ElementPositionWithDomNode) => {\n  if (\n    value.insertBeforeNode &&\n    !value.parentNode.contains(value.insertBeforeNode)\n  ) {\n    // skip position mutation - insertBeforeNode not a child of parent. happens\n    // when mutation observer for indvidual element fires out of order\n    return;\n  }\n  value.parentNode.insertBefore(el, value.insertBeforeNode);\n};\nfunction getElementPositionRecord(element: Element): PositionRecord {\n  const elementRecord = getElementRecord(element);\n  if (!elementRecord.position) {\n    elementRecord.position = createElementPropertyRecord(\n      element,\n      'position',\n      getElementPosition,\n      setElementPosition,\n      positionMutationRunner\n    );\n  }\n  return elementRecord.position;\n}\n\nconst setClassValue = (el: Element, val: string) =>\n  val ? (el.className = val) : el.removeAttribute('class');\nconst getClassValue = (el: Element) => el.className;\nfunction getElementClassRecord(el: Element): ClassnameRecord {\n  const elementRecord = getElementRecord(el);\n  if (!elementRecord.classes) {\n    elementRecord.classes = createElementPropertyRecord(\n      el,\n      'class',\n      getClassValue,\n      setClassValue,\n      classMutationRunner\n    );\n  }\n  return elementRecord.classes;\n}\n\nconst getAttrValue = (attrName: string) => (el: Element) =>\n  el.getAttribute(attrName) ?? null;\nconst setAttrValue = (attrName: string) => (el: Element, val: string | null) =>\n  val !== null ? el.setAttribute(attrName, val) : el.removeAttribute(attrName);\nfunction getElementAttributeRecord(el: Element, attr: string): AttributeRecord {\n  const elementRecord = getElementRecord(el);\n  if (!elementRecord.attributes[attr]) {\n    elementRecord.attributes[attr] = createElementPropertyRecord(\n      el,\n      attr,\n      getAttrValue(attr),\n      setAttrValue(attr),\n      attrMutationRunner\n    );\n  }\n  return elementRecord.attributes[attr];\n}\n\nfunction deleteElementPropertyRecord(el: Element, attr: string) {\n  const element = elements.get(el);\n  if (!element) return;\n  if (attr === 'html') {\n    element.html?.observer?.disconnect();\n    delete element.html;\n  } else if (attr === 'class') {\n    element.classes?.observer?.disconnect();\n    delete element.classes;\n  } else if (attr === 'position') {\n    element.position?.observer?.disconnect();\n    delete element.position;\n  } else {\n    element.attributes?.[attr]?.observer?.disconnect();\n    delete element.attributes[attr];\n  }\n}\n\nlet transformContainer: HTMLDivElement;\nfunction getTransformedHTML(html: string) {\n  if (!transformContainer) {\n    transformContainer = document.createElement('div');\n  }\n  transformContainer.innerHTML = html;\n  return transformContainer.innerHTML;\n}\n\nfunction setPropertyValue<T extends ElementPropertyRecord<any, any>>(\n  el: Element,\n  attr: string,\n  m: T\n) {\n  if (!m.isDirty) return;\n  m.isDirty = false;\n  const val = m.virtualValue;\n  if (!m.mutations.length) {\n    deleteElementPropertyRecord(el, attr);\n  }\n  m.setValue(el, val);\n}\n\nfunction setValue(m: ElementRecord, el: Element) {\n  m.html && setPropertyValue<HTMLRecord>(el, 'html', m.html);\n  m.classes && setPropertyValue<ClassnameRecord>(el, 'class', m.classes);\n  m.position && setPropertyValue<PositionRecord>(el, 'position', m.position);\n  Object.keys(m.attributes).forEach(attr => {\n    setPropertyValue<AttributeRecord>(el, attr, m.attributes[attr]);\n  });\n}\n\nfunction runDOMUpdates() {\n  elements.forEach(setValue);\n}\n\n// find or create ElementPropertyRecord, add mutation to it, then run\nfunction startMutating(mutation: Mutation, element: Element) {\n  let record: ElementPropertyRecord<any, any> | null = null;\n  if (mutation.kind === 'html') {\n    record = getElementHTMLRecord(element);\n  } else if (mutation.kind === 'class') {\n    record = getElementClassRecord(element);\n  } else if (mutation.kind === 'attribute') {\n    record = getElementAttributeRecord(element, mutation.attribute);\n  } else if (mutation.kind === 'position') {\n    record = getElementPositionRecord(element);\n  }\n  if (!record) return;\n  record.mutations.push(mutation);\n  record.mutationRunner(record);\n}\n\n// get (existing) ElementPropertyRecord, remove mutation from it, then run\nfunction stopMutating(mutation: Mutation, el: Element) {\n  let record: ElementPropertyRecord<any, any> | null = null;\n  if (mutation.kind === 'html') {\n    record = getElementHTMLRecord(el);\n  } else if (mutation.kind === 'class') {\n    record = getElementClassRecord(el);\n  } else if (mutation.kind === 'attribute') {\n    record = getElementAttributeRecord(el, mutation.attribute);\n  } else if (mutation.kind === 'position') {\n    record = getElementPositionRecord(el);\n  }\n  if (!record) return;\n  const index = record.mutations.indexOf(mutation);\n  if (index !== -1) record.mutations.splice(index, 1);\n  record.mutationRunner(record);\n}\n\n// maintain list of elements associated with mutation\nfunction refreshElementsSet(mutation: Mutation) {\n  // if a position mutation has already found an element to move, don't move\n  // any more elements\n  if (mutation.kind === 'position' && mutation.elements.size === 1) return;\n\n  const existingElements = new Set(mutation.elements);\n  const matchingElements = document.querySelectorAll(mutation.selector);\n  matchingElements.forEach(el => {\n    if (!existingElements.has(el)) {\n      mutation.elements.add(el);\n      startMutating(mutation, el);\n    }\n  });\n}\n\nfunction revertMutation(mutation: Mutation) {\n  mutation.elements.forEach(el => stopMutating(mutation, el));\n  mutation.elements.clear();\n  mutations.delete(mutation);\n}\n\nfunction refreshAllElementSets() {\n  mutations.forEach(refreshElementsSet);\n}\n\n// pause/resume global observer\nlet paused: boolean = false;\nexport function pauseGlobalObserver() {\n  paused = true;\n}\nexport function isGlobalObserverPaused() {\n  return paused;\n}\nexport function resumeGlobalObserver() {\n  paused = false;\n  refreshAllElementSets();\n}\n\n// Observer for elements that don't exist in the DOM yet\nlet observer: MutationObserver;\n\nexport function disconnectGlobalObserver() {\n  observer && observer.disconnect();\n}\nexport function connectGlobalObserver() {\n  if (typeof document === 'undefined') return;\n  if (!observer) {\n    observer = new MutationObserver(() => {\n      refreshAllElementSets();\n    });\n  }\n  refreshAllElementSets();\n  observer.observe(document.documentElement, {\n    childList: true,\n    subtree: true,\n    attributes: false,\n    characterData: false,\n  });\n}\n// run on init\nconnectGlobalObserver();\n\nexport const getHtmlMutationRecordsFromSelector = (selector: string) => {\n  const elements = document.querySelectorAll(selector);\n  const records: HTMLRecord[] = [];\n  elements.forEach(el => {\n    const record = getElementHTMLRecord(el);\n    if (record) records.push(record);\n  });\n  return records;\n};\n\nfunction newMutation(m: Mutation): MutationController {\n  // Not in a browser\n  if (typeof document === 'undefined') return nullController;\n  // add to global index of mutations\n  mutations.add(m);\n  // run refresh on init to establish list of elements associated w/ mutation\n  refreshElementsSet(m);\n  return {\n    revert: () => {\n      revertMutation(m);\n    },\n  };\n}\n\nfunction html(\n  selector: HTMLMutation['selector'],\n  mutate: HTMLMutation['mutate']\n) {\n  return newMutation({\n    kind: 'html',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction position(\n  selector: PositionMutation['selector'],\n  mutate: PositionMutation['mutate']\n) {\n  return newMutation({\n    kind: 'position',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction classes(\n  selector: ClassnameMutation['selector'],\n  mutate: ClassnameMutation['mutate']\n) {\n  return newMutation({\n    kind: 'class',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction attribute(\n  selector: AttrMutation['selector'],\n  attribute: AttrMutation['attribute'],\n  mutate: AttrMutation['mutate']\n) {\n  if (!validAttributeName.test(attribute)) return nullController;\n\n  if (attribute === 'class' || attribute === 'className') {\n    return classes(selector, classnames => {\n      const mutatedClassnames = mutate(Array.from(classnames).join(' '));\n      classnames.clear();\n      if (!mutatedClassnames) return;\n      mutatedClassnames\n        .split(/\\s+/g)\n        .filter(Boolean)\n        .forEach(c => classnames.add(c));\n    });\n  }\n\n  return newMutation({\n    kind: 'attribute',\n    attribute,\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction declarative({\n  selector,\n  action,\n  value,\n  attribute: attr,\n  parentSelector,\n  insertBeforeSelector,\n}: DeclarativeMutation): MutationController {\n  if (attr === 'html') {\n    if (action === 'append') {\n      return html(selector, val => val + (value ?? ''));\n    } else if (action === 'set') {\n      return html(selector, () => value ?? '');\n    }\n  } else if (attr === 'class') {\n    if (action === 'append') {\n      return classes(selector, val => {\n        if (value) val.add(value);\n      });\n    } else if (action === 'remove') {\n      return classes(selector, val => {\n        if (value) val.delete(value);\n      });\n    } else if (action === 'set') {\n      return classes(selector, val => {\n        val.clear();\n        if (value) val.add(value);\n      });\n    }\n  } else if (attr === 'position') {\n    if (action === 'set' && parentSelector) {\n      return position(selector, () => ({\n        insertBeforeSelector,\n        parentSelector,\n      }));\n    }\n  } else {\n    if (action === 'append') {\n      return attribute(selector, attr, val =>\n        val !== null ? val + (value ?? '') : value ?? ''\n      );\n    } else if (action === 'set') {\n      return attribute(selector, attr, () => value ?? '');\n    } else if (action === 'remove') {\n      return attribute(selector, attr, () => null);\n    }\n  }\n  return nullController;\n}\n\nexport type MutationController = {\n  revert: () => void;\n};\n\nexport type DeclarativeMutation = {\n  selector: string;\n  attribute: string;\n  action: 'append' | 'set' | 'remove';\n  value?: string;\n  parentSelector?: string;\n  insertBeforeSelector?: string;\n};\n\nexport default {\n  html,\n  classes,\n  attribute,\n  position,\n  declarative,\n};\n"],"names":["validAttributeName","nullController","revert","elements","Map","mutations","Set","getObserverInit","attr","childList","subtree","attributes","characterData","attributeFilter","getElementRecord","element","record","get","set","createElementPropertyRecord","el","getCurrentValue","setValue","mutationRunner","currentValue","isDirty","originalValue","virtualValue","_positionTimeout","observer","MutationObserver","paused","setTimeout","parentNode","insertBeforeNode","observe","queueIfNeeded","val","currentVal","runDOMUpdates","htmlMutationRunner","forEach","m","mutate","getTransformedHTML","classMutationRunner","split","filter","Boolean","Array","from","join","attrMutationRunner","_loadDOMNodes","parentSelector","insertBeforeSelector","document","querySelector","positionMutationRunner","selectors","newNodes","getHTMLValue","innerHTML","setHTMLValue","value","getElementHTMLRecord","elementRecord","html","getElementPosition","parentElement","nextElementSibling","setElementPosition","contains","insertBefore","getElementPositionRecord","position","setClassValue","className","removeAttribute","getClassValue","getElementClassRecord","classes","getAttrValue","attrName","getAttribute","setAttrValue","setAttribute","getElementAttributeRecord","deleteElementPropertyRecord","disconnect","transformContainer","createElement","setPropertyValue","length","Object","keys","startMutating","mutation","kind","attribute","push","stopMutating","index","indexOf","splice","refreshElementsSet","size","existingElements","matchingElements","querySelectorAll","selector","has","add","revertMutation","clear","refreshAllElementSets","pauseGlobalObserver","isGlobalObserverPaused","resumeGlobalObserver","disconnectGlobalObserver","connectGlobalObserver","documentElement","getHtmlMutationRecordsFromSelector","records","newMutation","test","classnames","mutatedClassnames","c","declarative","action"],"mappings":";;;;IAAaA,kBAAkB,GAAG;AAClC,IAAMC,cAAc,GAAuB;AACzCC,EAAAA,MAAM,EAAE;AADiC,CAA3C;AAIA,IAAMC,QAAQ,gBAAgC,IAAIC,GAAJ,EAA9C;AACA,IAAMC,SAAS,gBAAkB,IAAIC,GAAJ,EAAjC;;AAEA,SAASC,eAAT,CAAyBC,IAAzB;AACE,SAAOA,IAAI,KAAK,MAAT,GACH;AACEC,IAAAA,SAAS,EAAE,IADb;AAEEC,IAAAA,OAAO,EAAE,IAFX;AAGEC,IAAAA,UAAU,EAAE,IAHd;AAIEC,IAAAA,aAAa,EAAE;AAJjB,GADG,GAOH;AACEH,IAAAA,SAAS,EAAE,KADb;AAEEC,IAAAA,OAAO,EAAE,KAFX;AAGEC,IAAAA,UAAU,EAAE,IAHd;AAIEE,IAAAA,eAAe,EAAE,CAACL,IAAD;AAJnB,GAPJ;AAaD;;AAED,SAASM,gBAAT,CAA0BC,OAA1B;AACE,MAAIC,MAAM,GAAGb,QAAQ,CAACc,GAAT,CAAaF,OAAb,CAAb;;AAEA,MAAI,CAACC,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAG;AAAED,MAAAA,OAAO,EAAPA,OAAF;AAAWJ,MAAAA,UAAU,EAAE;AAAvB,KAAT;AACAR,IAAAA,QAAQ,CAACe,GAAT,CAAaH,OAAb,EAAsBC,MAAtB;AACD;;AAED,SAAOA,MAAP;AACD;;AACD,SAASG,2BAAT,CACEC,EADF,EAEEZ,IAFF,EAGEa,eAHF,EAIEC,QAJF,EAKEC,cALF;AAOE,MAAMC,YAAY,GAAGH,eAAe,CAACD,EAAD,CAApC;AACA,MAAMJ,MAAM,GAAoC;AAC9CS,IAAAA,OAAO,EAAE,KADqC;AAE9CC,IAAAA,aAAa,EAAEF,YAF+B;AAG9CG,IAAAA,YAAY,EAAEH,YAHgC;AAI9CnB,IAAAA,SAAS,EAAE,EAJmC;AAK9Ce,IAAAA,EAAE,EAAFA,EAL8C;AAM9CQ,IAAAA,gBAAgB,EAAE,IAN4B;AAO9CC,IAAAA,QAAQ,EAAE,IAAIC,gBAAJ,CAAqB;AAC7B;AACA;AACA;AACA;AACA,UAAIC,MAAJ,EAAY;AACZ,UAAIvB,IAAI,KAAK,UAAT,IAAuBQ,MAAM,CAACY,gBAAlC,EAAoD,OAApD,KACK,IAAIpB,IAAI,KAAK,UAAb,EACHQ,MAAM,CAACY,gBAAP,GAA0BI,UAAU,CAAC;AACnChB,QAAAA,MAAM,CAACY,gBAAP,GAA0B,IAA1B;AACD,OAFmC,EAEjC,IAFiC,CAApC;AAIF,UAAMJ,YAAY,GAAGH,eAAe,CAACD,EAAD,CAApC;AACA,UACEZ,IAAI,KAAK,UAAT,IACAgB,YAAY,CAACS,UAAb,KAA4BjB,MAAM,CAACW,YAAP,CAAoBM,UADhD,IAEAT,YAAY,CAACU,gBAAb,KAAkClB,MAAM,CAACW,YAAP,CAAoBO,gBAHxD,EAKE;AACF,UAAIV,YAAY,KAAKR,MAAM,CAACW,YAA5B,EAA0C;AAC1CX,MAAAA,MAAM,CAACU,aAAP,GAAuBF,YAAvB;AACAD,MAAAA,cAAc,CAACP,MAAD,CAAd;AACD,KAtBS,CAPoC;AA8B9CO,IAAAA,cAAc,EAAdA,cA9B8C;AA+B9CD,IAAAA,QAAQ,EAARA,QA/B8C;AAgC9CD,IAAAA,eAAe,EAAfA;AAhC8C,GAAhD;;AAkCA,MAAIb,IAAI,KAAK,UAAT,IAAuBY,EAAE,CAACa,UAA9B,EAA0C;AACxCjB,IAAAA,MAAM,CAACa,QAAP,CAAgBM,OAAhB,CAAwBf,EAAE,CAACa,UAA3B,EAAuC;AACrCxB,MAAAA,SAAS,EAAE,IAD0B;AAErCC,MAAAA,OAAO,EAAE,IAF4B;AAGrCC,MAAAA,UAAU,EAAE,KAHyB;AAIrCC,MAAAA,aAAa,EAAE;AAJsB,KAAvC;AAMD,GAPD,MAOO;AACLI,IAAAA,MAAM,CAACa,QAAP,CAAgBM,OAAhB,CAAwBf,EAAxB,EAA4Bb,eAAe,CAACC,IAAD,CAA3C;AACD;;AACD,SAAOQ,MAAP;AACD;;AAED,SAASoB,aAAT,CACEC,GADF,EAEErB,MAFF;AAIE,MAAMsB,UAAU,GAAGtB,MAAM,CAACK,eAAP,CAAuBL,MAAM,CAACI,EAA9B,CAAnB;AACAJ,EAAAA,MAAM,CAACW,YAAP,GAAsBU,GAAtB;;AACA,MAAIA,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA1B,EAAoC;AAClC,QACE,CAACC,UAAD,IACAD,GAAG,CAACJ,UAAJ,KAAmBK,UAAU,CAACL,UAD9B,IAEAI,GAAG,CAACH,gBAAJ,KAAyBI,UAAU,CAACJ,gBAHtC,EAIE;AACAlB,MAAAA,MAAM,CAACS,OAAP,GAAiB,IAAjB;AACAc,MAAAA,aAAa;AACd;AACF,GATD,MASO,IAAIF,GAAG,KAAKC,UAAZ,EAAwB;AAC7BtB,IAAAA,MAAM,CAACS,OAAP,GAAiB,IAAjB;AACAc,IAAAA,aAAa;AACd;AACF;;AAED,SAASC,kBAAT,CAA4BxB,MAA5B;AACE,MAAIqB,GAAG,GAAGrB,MAAM,CAACU,aAAjB;AACAV,EAAAA,MAAM,CAACX,SAAP,CAAiBoC,OAAjB,CAAyB,UAAAC,CAAC;AAAA,WAAKL,GAAG,GAAGK,CAAC,CAACC,MAAF,CAASN,GAAT,CAAX;AAAA,GAA1B;AACAD,EAAAA,aAAa,CAACQ,kBAAkB,CAACP,GAAD,CAAnB,EAA0BrB,MAA1B,CAAb;AACD;;AACD,SAAS6B,mBAAT,CAA6B7B,MAA7B;AACE,MAAMqB,GAAG,GAAG,IAAI/B,GAAJ,CAAQU,MAAM,CAACU,aAAP,CAAqBoB,KAArB,CAA2B,KAA3B,EAAkCC,MAAlC,CAAyCC,OAAzC,CAAR,CAAZ;AACAhC,EAAAA,MAAM,CAACX,SAAP,CAAiBoC,OAAjB,CAAyB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,MAAF,CAASN,GAAT,CAAJ;AAAA,GAA1B;AACAD,EAAAA,aAAa,CACXa,KAAK,CAACC,IAAN,CAAWb,GAAX,EACGU,MADH,CACUC,OADV,EAEGG,IAFH,CAEQ,GAFR,CADW,EAIXnC,MAJW,CAAb;AAMD;;AAED,SAASoC,kBAAT,CAA4BpC,MAA5B;AACE,MAAIqB,GAAG,GAAkBrB,MAAM,CAACU,aAAhC;AACAV,EAAAA,MAAM,CAACX,SAAP,CAAiBoC,OAAjB,CAAyB,UAAAC,CAAC;AAAA,WAAKL,GAAG,GAAGK,CAAC,CAACC,MAAF,CAASN,GAAT,CAAX;AAAA,GAA1B;AACAD,EAAAA,aAAa,CAACC,GAAD,EAAMrB,MAAN,CAAb;AACD;;AAED,SAASqC,aAAT;MACEC,sBAAAA;MACAC,4BAAAA;AAEA,MAAMtB,UAAU,GAAGuB,QAAQ,CAACC,aAAT,CAAoCH,cAApC,CAAnB;AACA,MAAI,CAACrB,UAAL,EAAiB,OAAO,IAAP;AACjB,MAAMC,gBAAgB,GAAGqB,oBAAoB,GACzCC,QAAQ,CAACC,aAAT,CAAoCF,oBAApC,CADyC,GAEzC,IAFJ;AAGA,MAAIA,oBAAoB,IAAI,CAACrB,gBAA7B,EAA+C,OAAO,IAAP;AAC/C,SAAO;AACLD,IAAAA,UAAU,EAAVA,UADK;AAELC,IAAAA,gBAAgB,EAAhBA;AAFK,GAAP;AAID;;AAED,SAASwB,sBAAT,CAAgC1C,MAAhC;AACE,MAAIqB,GAAG,GAAGrB,MAAM,CAACU,aAAjB;AACAV,EAAAA,MAAM,CAACX,SAAP,CAAiBoC,OAAjB,CAAyB,UAAAC,CAAC;AACxB,QAAMiB,SAAS,GAAGjB,CAAC,CAACC,MAAF,EAAlB;;AACA,QAAMiB,QAAQ,GAAGP,aAAa,CAACM,SAAD,CAA9B;;AACAtB,IAAAA,GAAG,GAAGuB,QAAQ,IAAIvB,GAAlB;AACD,GAJD;AAKAD,EAAAA,aAAa,CAACC,GAAD,EAAMrB,MAAN,CAAb;AACD;;AAED,IAAM6C,YAAY,GAAG,SAAfA,YAAe,CAACzC,EAAD;AAAA,SAAiBA,EAAE,CAAC0C,SAApB;AAAA,CAArB;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAC3C,EAAD,EAAc4C,KAAd;AAAA,SAAiC5C,EAAE,CAAC0C,SAAH,GAAeE,KAAhD;AAAA,CAArB;;AACA,SAASC,oBAAT,CAA8BlD,OAA9B;AACE,MAAMmD,aAAa,GAAGpD,gBAAgB,CAACC,OAAD,CAAtC;;AACA,MAAI,CAACmD,aAAa,CAACC,IAAnB,EAAyB;AACvBD,IAAAA,aAAa,CAACC,IAAd,GAAqBhD,2BAA2B,CAC9CJ,OAD8C,EAE9C,MAF8C,EAG9C8C,YAH8C,EAI9CE,YAJ8C,EAK9CvB,kBAL8C,CAAhD;AAOD;;AACD,SAAO0B,aAAa,CAACC,IAArB;AACD;;AAED,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAChD,EAAD;AACzB,SAAO;AACLa,IAAAA,UAAU,EAAEb,EAAE,CAACiD,aADV;AAELnC,IAAAA,gBAAgB,EAAEd,EAAE,CAACkD;AAFhB,GAAP;AAID,CALD;;AAMA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACnD,EAAD,EAAc4C,KAAd;AACzB,MACEA,KAAK,CAAC9B,gBAAN,IACA,CAAC8B,KAAK,CAAC/B,UAAN,CAAiBuC,QAAjB,CAA0BR,KAAK,CAAC9B,gBAAhC,CAFH,EAGE;AACA;AACA;AACA;AACD;;AACD8B,EAAAA,KAAK,CAAC/B,UAAN,CAAiBwC,YAAjB,CAA8BrD,EAA9B,EAAkC4C,KAAK,CAAC9B,gBAAxC;AACD,CAVD;;AAWA,SAASwC,wBAAT,CAAkC3D,OAAlC;AACE,MAAMmD,aAAa,GAAGpD,gBAAgB,CAACC,OAAD,CAAtC;;AACA,MAAI,CAACmD,aAAa,CAACS,QAAnB,EAA6B;AAC3BT,IAAAA,aAAa,CAACS,QAAd,GAAyBxD,2BAA2B,CAClDJ,OADkD,EAElD,UAFkD,EAGlDqD,kBAHkD,EAIlDG,kBAJkD,EAKlDb,sBALkD,CAApD;AAOD;;AACD,SAAOQ,aAAa,CAACS,QAArB;AACD;;AAED,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACxD,EAAD,EAAciB,GAAd;AAAA,SACpBA,GAAG,GAAIjB,EAAE,CAACyD,SAAH,GAAexC,GAAnB,GAA0BjB,EAAE,CAAC0D,eAAH,CAAmB,OAAnB,CADT;AAAA,CAAtB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAC3D,EAAD;AAAA,SAAiBA,EAAE,CAACyD,SAApB;AAAA,CAAtB;;AACA,SAASG,qBAAT,CAA+B5D,EAA/B;AACE,MAAM8C,aAAa,GAAGpD,gBAAgB,CAACM,EAAD,CAAtC;;AACA,MAAI,CAAC8C,aAAa,CAACe,OAAnB,EAA4B;AAC1Bf,IAAAA,aAAa,CAACe,OAAd,GAAwB9D,2BAA2B,CACjDC,EADiD,EAEjD,OAFiD,EAGjD2D,aAHiD,EAIjDH,aAJiD,EAKjD/B,mBALiD,CAAnD;AAOD;;AACD,SAAOqB,aAAa,CAACe,OAArB;AACD;;AAED,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD;AAAA,SAAsB,UAAC/D,EAAD;AAAA;;AAAA,+BACzCA,EAAE,CAACgE,YAAH,CAAgBD,QAAhB,CADyC,+BACZ,IADY;AAAA,GAAtB;AAAA,CAArB;;AAEA,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACF,QAAD;AAAA,SAAsB,UAAC/D,EAAD,EAAciB,GAAd;AAAA,WACzCA,GAAG,KAAK,IAAR,GAAejB,EAAE,CAACkE,YAAH,CAAgBH,QAAhB,EAA0B9C,GAA1B,CAAf,GAAgDjB,EAAE,CAAC0D,eAAH,CAAmBK,QAAnB,CADP;AAAA,GAAtB;AAAA,CAArB;;AAEA,SAASI,yBAAT,CAAmCnE,EAAnC,EAAgDZ,IAAhD;AACE,MAAM0D,aAAa,GAAGpD,gBAAgB,CAACM,EAAD,CAAtC;;AACA,MAAI,CAAC8C,aAAa,CAACvD,UAAd,CAAyBH,IAAzB,CAAL,EAAqC;AACnC0D,IAAAA,aAAa,CAACvD,UAAd,CAAyBH,IAAzB,IAAiCW,2BAA2B,CAC1DC,EAD0D,EAE1DZ,IAF0D,EAG1D0E,YAAY,CAAC1E,IAAD,CAH8C,EAI1D6E,YAAY,CAAC7E,IAAD,CAJ8C,EAK1D4C,kBAL0D,CAA5D;AAOD;;AACD,SAAOc,aAAa,CAACvD,UAAd,CAAyBH,IAAzB,CAAP;AACD;;AAED,SAASgF,2BAAT,CAAqCpE,EAArC,EAAkDZ,IAAlD;AACE,MAAMO,OAAO,GAAGZ,QAAQ,CAACc,GAAT,CAAaG,EAAb,CAAhB;AACA,MAAI,CAACL,OAAL,EAAc;;AACd,MAAIP,IAAI,KAAK,MAAb,EAAqB;AAAA;;AACnB,qBAAAO,OAAO,CAACoD,IAAR,4DAActC,QAAd,2CAAwB4D,UAAxB;AACA,WAAO1E,OAAO,CAACoD,IAAf;AACD,GAHD,MAGO,IAAI3D,IAAI,KAAK,OAAb,EAAsB;AAAA;;AAC3B,wBAAAO,OAAO,CAACkE,OAAR,+DAAiBpD,QAAjB,2CAA2B4D,UAA3B;AACA,WAAO1E,OAAO,CAACkE,OAAf;AACD,GAHM,MAGA,IAAIzE,IAAI,KAAK,UAAb,EAAyB;AAAA;;AAC9B,yBAAAO,OAAO,CAAC4D,QAAR,gEAAkB9C,QAAlB,2CAA4B4D,UAA5B;AACA,WAAO1E,OAAO,CAAC4D,QAAf;AACD,GAHM,MAGA;AAAA;;AACL,2BAAA5D,OAAO,CAACJ,UAAR,kEAAqBH,IAArB,sEAA4BqB,QAA5B,4CAAsC4D,UAAtC;AACA,WAAO1E,OAAO,CAACJ,UAAR,CAAmBH,IAAnB,CAAP;AACD;AACF;;AAED,IAAIkF,kBAAJ;;AACA,SAAS9C,kBAAT,CAA4BuB,IAA5B;AACE,MAAI,CAACuB,kBAAL,EAAyB;AACvBA,IAAAA,kBAAkB,GAAGlC,QAAQ,CAACmC,aAAT,CAAuB,KAAvB,CAArB;AACD;;AACDD,EAAAA,kBAAkB,CAAC5B,SAAnB,GAA+BK,IAA/B;AACA,SAAOuB,kBAAkB,CAAC5B,SAA1B;AACD;;AAED,SAAS8B,gBAAT,CACExE,EADF,EAEEZ,IAFF,EAGEkC,CAHF;AAKE,MAAI,CAACA,CAAC,CAACjB,OAAP,EAAgB;AAChBiB,EAAAA,CAAC,CAACjB,OAAF,GAAY,KAAZ;AACA,MAAMY,GAAG,GAAGK,CAAC,CAACf,YAAd;;AACA,MAAI,CAACe,CAAC,CAACrC,SAAF,CAAYwF,MAAjB,EAAyB;AACvBL,IAAAA,2BAA2B,CAACpE,EAAD,EAAKZ,IAAL,CAA3B;AACD;;AACDkC,EAAAA,CAAC,CAACpB,QAAF,CAAWF,EAAX,EAAeiB,GAAf;AACD;;AAED,SAASf,QAAT,CAAkBoB,CAAlB,EAAoCtB,EAApC;AACEsB,EAAAA,CAAC,CAACyB,IAAF,IAAUyB,gBAAgB,CAAaxE,EAAb,EAAiB,MAAjB,EAAyBsB,CAAC,CAACyB,IAA3B,CAA1B;AACAzB,EAAAA,CAAC,CAACuC,OAAF,IAAaW,gBAAgB,CAAkBxE,EAAlB,EAAsB,OAAtB,EAA+BsB,CAAC,CAACuC,OAAjC,CAA7B;AACAvC,EAAAA,CAAC,CAACiC,QAAF,IAAciB,gBAAgB,CAAiBxE,EAAjB,EAAqB,UAArB,EAAiCsB,CAAC,CAACiC,QAAnC,CAA9B;AACAmB,EAAAA,MAAM,CAACC,IAAP,CAAYrD,CAAC,CAAC/B,UAAd,EAA0B8B,OAA1B,CAAkC,UAAAjC,IAAI;AACpCoF,IAAAA,gBAAgB,CAAkBxE,EAAlB,EAAsBZ,IAAtB,EAA4BkC,CAAC,CAAC/B,UAAF,CAAaH,IAAb,CAA5B,CAAhB;AACD,GAFD;AAGD;;AAED,SAAS+B,aAAT;AACEpC,EAAAA,QAAQ,CAACsC,OAAT,CAAiBnB,QAAjB;AACD;;;AAGD,SAAS0E,aAAT,CAAuBC,QAAvB,EAA2ClF,OAA3C;AACE,MAAIC,MAAM,GAA2C,IAArD;;AACA,MAAIiF,QAAQ,CAACC,IAAT,KAAkB,MAAtB,EAA8B;AAC5BlF,IAAAA,MAAM,GAAGiD,oBAAoB,CAAClD,OAAD,CAA7B;AACD,GAFD,MAEO,IAAIkF,QAAQ,CAACC,IAAT,KAAkB,OAAtB,EAA+B;AACpClF,IAAAA,MAAM,GAAGgE,qBAAqB,CAACjE,OAAD,CAA9B;AACD,GAFM,MAEA,IAAIkF,QAAQ,CAACC,IAAT,KAAkB,WAAtB,EAAmC;AACxClF,IAAAA,MAAM,GAAGuE,yBAAyB,CAACxE,OAAD,EAAUkF,QAAQ,CAACE,SAAnB,CAAlC;AACD,GAFM,MAEA,IAAIF,QAAQ,CAACC,IAAT,KAAkB,UAAtB,EAAkC;AACvClF,IAAAA,MAAM,GAAG0D,wBAAwB,CAAC3D,OAAD,CAAjC;AACD;;AACD,MAAI,CAACC,MAAL,EAAa;AACbA,EAAAA,MAAM,CAACX,SAAP,CAAiB+F,IAAjB,CAAsBH,QAAtB;AACAjF,EAAAA,MAAM,CAACO,cAAP,CAAsBP,MAAtB;AACD;;;AAGD,SAASqF,YAAT,CAAsBJ,QAAtB,EAA0C7E,EAA1C;AACE,MAAIJ,MAAM,GAA2C,IAArD;;AACA,MAAIiF,QAAQ,CAACC,IAAT,KAAkB,MAAtB,EAA8B;AAC5BlF,IAAAA,MAAM,GAAGiD,oBAAoB,CAAC7C,EAAD,CAA7B;AACD,GAFD,MAEO,IAAI6E,QAAQ,CAACC,IAAT,KAAkB,OAAtB,EAA+B;AACpClF,IAAAA,MAAM,GAAGgE,qBAAqB,CAAC5D,EAAD,CAA9B;AACD,GAFM,MAEA,IAAI6E,QAAQ,CAACC,IAAT,KAAkB,WAAtB,EAAmC;AACxClF,IAAAA,MAAM,GAAGuE,yBAAyB,CAACnE,EAAD,EAAK6E,QAAQ,CAACE,SAAd,CAAlC;AACD,GAFM,MAEA,IAAIF,QAAQ,CAACC,IAAT,KAAkB,UAAtB,EAAkC;AACvClF,IAAAA,MAAM,GAAG0D,wBAAwB,CAACtD,EAAD,CAAjC;AACD;;AACD,MAAI,CAACJ,MAAL,EAAa;AACb,MAAMsF,KAAK,GAAGtF,MAAM,CAACX,SAAP,CAAiBkG,OAAjB,CAAyBN,QAAzB,CAAd;AACA,MAAIK,KAAK,KAAK,CAAC,CAAf,EAAkBtF,MAAM,CAACX,SAAP,CAAiBmG,MAAjB,CAAwBF,KAAxB,EAA+B,CAA/B;AAClBtF,EAAAA,MAAM,CAACO,cAAP,CAAsBP,MAAtB;AACD;;;AAGD,SAASyF,kBAAT,CAA4BR,QAA5B;AACE;AACA;AACA,MAAIA,QAAQ,CAACC,IAAT,KAAkB,UAAlB,IAAgCD,QAAQ,CAAC9F,QAAT,CAAkBuG,IAAlB,KAA2B,CAA/D,EAAkE;AAElE,MAAMC,gBAAgB,GAAG,IAAIrG,GAAJ,CAAQ2F,QAAQ,CAAC9F,QAAjB,CAAzB;AACA,MAAMyG,gBAAgB,GAAGpD,QAAQ,CAACqD,gBAAT,CAA0BZ,QAAQ,CAACa,QAAnC,CAAzB;AACAF,EAAAA,gBAAgB,CAACnE,OAAjB,CAAyB,UAAArB,EAAE;AACzB,QAAI,CAACuF,gBAAgB,CAACI,GAAjB,CAAqB3F,EAArB,CAAL,EAA+B;AAC7B6E,MAAAA,QAAQ,CAAC9F,QAAT,CAAkB6G,GAAlB,CAAsB5F,EAAtB;AACA4E,MAAAA,aAAa,CAACC,QAAD,EAAW7E,EAAX,CAAb;AACD;AACF,GALD;AAMD;;AAED,SAAS6F,cAAT,CAAwBhB,QAAxB;AACEA,EAAAA,QAAQ,CAAC9F,QAAT,CAAkBsC,OAAlB,CAA0B,UAAArB,EAAE;AAAA,WAAIiF,YAAY,CAACJ,QAAD,EAAW7E,EAAX,CAAhB;AAAA,GAA5B;AACA6E,EAAAA,QAAQ,CAAC9F,QAAT,CAAkB+G,KAAlB;AACA7G,EAAAA,SAAS,UAAT,CAAiB4F,QAAjB;AACD;;AAED,SAASkB,qBAAT;AACE9G,EAAAA,SAAS,CAACoC,OAAV,CAAkBgE,kBAAlB;AACD;;;AAGD,IAAI1E,MAAM,GAAY,KAAtB;SACgBqF;AACdrF,EAAAA,MAAM,GAAG,IAAT;AACD;SACesF;AACd,SAAOtF,MAAP;AACD;SACeuF;AACdvF,EAAAA,MAAM,GAAG,KAAT;AACAoF,EAAAA,qBAAqB;AACtB;;AAGD,IAAItF,QAAJ;SAEgB0F;AACd1F,EAAAA,QAAQ,IAAIA,QAAQ,CAAC4D,UAAT,EAAZ;AACD;SACe+B;AACd,MAAI,OAAOhE,QAAP,KAAoB,WAAxB,EAAqC;;AACrC,MAAI,CAAC3B,QAAL,EAAe;AACbA,IAAAA,QAAQ,GAAG,IAAIC,gBAAJ,CAAqB;AAC9BqF,MAAAA,qBAAqB;AACtB,KAFU,CAAX;AAGD;;AACDA,EAAAA,qBAAqB;AACrBtF,EAAAA,QAAQ,CAACM,OAAT,CAAiBqB,QAAQ,CAACiE,eAA1B,EAA2C;AACzChH,IAAAA,SAAS,EAAE,IAD8B;AAEzCC,IAAAA,OAAO,EAAE,IAFgC;AAGzCC,IAAAA,UAAU,EAAE,KAH6B;AAIzCC,IAAAA,aAAa,EAAE;AAJ0B,GAA3C;AAMD;;AAED4G,qBAAqB;IAERE,kCAAkC,GAAG,SAArCA,kCAAqC,CAACZ,QAAD;AAChD,MAAM3G,QAAQ,GAAGqD,QAAQ,CAACqD,gBAAT,CAA0BC,QAA1B,CAAjB;AACA,MAAMa,OAAO,GAAiB,EAA9B;AACAxH,EAAAA,QAAQ,CAACsC,OAAT,CAAiB,UAAArB,EAAE;AACjB,QAAMJ,MAAM,GAAGiD,oBAAoB,CAAC7C,EAAD,CAAnC;AACA,QAAIJ,MAAJ,EAAY2G,OAAO,CAACvB,IAAR,CAAapF,MAAb;AACb,GAHD;AAIA,SAAO2G,OAAP;AACD;;AAED,SAASC,WAAT,CAAqBlF,CAArB;AACE;AACA,MAAI,OAAOc,QAAP,KAAoB,WAAxB,EAAqC,OAAOvD,cAAP;;AAErCI,EAAAA,SAAS,CAAC2G,GAAV,CAActE,CAAd;;AAEA+D,EAAAA,kBAAkB,CAAC/D,CAAD,CAAlB;AACA,SAAO;AACLxC,IAAAA,MAAM,EAAE;AACN+G,MAAAA,cAAc,CAACvE,CAAD,CAAd;AACD;AAHI,GAAP;AAKD;;AAED,SAASyB,IAAT,CACE2C,QADF,EAEEnE,MAFF;AAIE,SAAOiF,WAAW,CAAC;AACjB1B,IAAAA,IAAI,EAAE,MADW;AAEjB/F,IAAAA,QAAQ,EAAE,IAAIG,GAAJ,EAFO;AAGjBqC,IAAAA,MAAM,EAANA,MAHiB;AAIjBmE,IAAAA,QAAQ,EAARA;AAJiB,GAAD,CAAlB;AAMD;;AAED,SAASnC,QAAT,CACEmC,QADF,EAEEnE,MAFF;AAIE,SAAOiF,WAAW,CAAC;AACjB1B,IAAAA,IAAI,EAAE,UADW;AAEjB/F,IAAAA,QAAQ,EAAE,IAAIG,GAAJ,EAFO;AAGjBqC,IAAAA,MAAM,EAANA,MAHiB;AAIjBmE,IAAAA,QAAQ,EAARA;AAJiB,GAAD,CAAlB;AAMD;;AAED,SAAS7B,OAAT,CACE6B,QADF,EAEEnE,MAFF;AAIE,SAAOiF,WAAW,CAAC;AACjB1B,IAAAA,IAAI,EAAE,OADW;AAEjB/F,IAAAA,QAAQ,EAAE,IAAIG,GAAJ,EAFO;AAGjBqC,IAAAA,MAAM,EAANA,MAHiB;AAIjBmE,IAAAA,QAAQ,EAARA;AAJiB,GAAD,CAAlB;AAMD;;AAED,SAASX,SAAT,CACEW,QADF,EAEEX,SAFF,EAGExD,MAHF;AAKE,MAAI,CAAC3C,kBAAkB,CAAC6H,IAAnB,CAAwB1B,SAAxB,CAAL,EAAyC,OAAOlG,cAAP;;AAEzC,MAAIkG,SAAS,KAAK,OAAd,IAAyBA,SAAS,KAAK,WAA3C,EAAwD;AACtD,WAAOlB,OAAO,CAAC6B,QAAD,EAAW,UAAAgB,UAAU;AACjC,UAAMC,iBAAiB,GAAGpF,MAAM,CAACM,KAAK,CAACC,IAAN,CAAW4E,UAAX,EAAuB3E,IAAvB,CAA4B,GAA5B,CAAD,CAAhC;AACA2E,MAAAA,UAAU,CAACZ,KAAX;AACA,UAAI,CAACa,iBAAL,EAAwB;AACxBA,MAAAA,iBAAiB,CACdjF,KADH,CACS,MADT,EAEGC,MAFH,CAEUC,OAFV,EAGGP,OAHH,CAGW,UAAAuF,CAAC;AAAA,eAAIF,UAAU,CAACd,GAAX,CAAegB,CAAf,CAAJ;AAAA,OAHZ;AAID,KARa,CAAd;AASD;;AAED,SAAOJ,WAAW,CAAC;AACjB1B,IAAAA,IAAI,EAAE,WADW;AAEjBC,IAAAA,SAAS,EAATA,SAFiB;AAGjBhG,IAAAA,QAAQ,EAAE,IAAIG,GAAJ,EAHO;AAIjBqC,IAAAA,MAAM,EAANA,MAJiB;AAKjBmE,IAAAA,QAAQ,EAARA;AALiB,GAAD,CAAlB;AAOD;;AAED,SAASmB,WAAT;MACEnB,iBAAAA;MACAoB,eAAAA;MACAlE,cAAAA;MACWxD,aAAX2F;MACA7C,uBAAAA;MACAC,6BAAAA;;AAEA,MAAI/C,IAAI,KAAK,MAAb,EAAqB;AACnB,QAAI0H,MAAM,KAAK,QAAf,EAAyB;AACvB,aAAO/D,IAAI,CAAC2C,QAAD,EAAW,UAAAzE,GAAG;AAAA,eAAIA,GAAG,IAAI2B,KAAJ,WAAIA,KAAJ,GAAa,EAAb,CAAP;AAAA,OAAd,CAAX;AACD,KAFD,MAEO,IAAIkE,MAAM,KAAK,KAAf,EAAsB;AAC3B,aAAO/D,IAAI,CAAC2C,QAAD,EAAW;AAAA,eAAM9C,KAAN,WAAMA,KAAN,GAAe,EAAf;AAAA,OAAX,CAAX;AACD;AACF,GAND,MAMO,IAAIxD,IAAI,KAAK,OAAb,EAAsB;AAC3B,QAAI0H,MAAM,KAAK,QAAf,EAAyB;AACvB,aAAOjD,OAAO,CAAC6B,QAAD,EAAW,UAAAzE,GAAG;AAC1B,YAAI2B,KAAJ,EAAW3B,GAAG,CAAC2E,GAAJ,CAAQhD,KAAR;AACZ,OAFa,CAAd;AAGD,KAJD,MAIO,IAAIkE,MAAM,KAAK,QAAf,EAAyB;AAC9B,aAAOjD,OAAO,CAAC6B,QAAD,EAAW,UAAAzE,GAAG;AAC1B,YAAI2B,KAAJ,EAAW3B,GAAG,UAAH,CAAW2B,KAAX;AACZ,OAFa,CAAd;AAGD,KAJM,MAIA,IAAIkE,MAAM,KAAK,KAAf,EAAsB;AAC3B,aAAOjD,OAAO,CAAC6B,QAAD,EAAW,UAAAzE,GAAG;AAC1BA,QAAAA,GAAG,CAAC6E,KAAJ;AACA,YAAIlD,KAAJ,EAAW3B,GAAG,CAAC2E,GAAJ,CAAQhD,KAAR;AACZ,OAHa,CAAd;AAID;AACF,GAfM,MAeA,IAAIxD,IAAI,KAAK,UAAb,EAAyB;AAC9B,QAAI0H,MAAM,KAAK,KAAX,IAAoB5E,cAAxB,EAAwC;AACtC,aAAOqB,QAAQ,CAACmC,QAAD,EAAW;AAAA,eAAO;AAC/BvD,UAAAA,oBAAoB,EAApBA,oBAD+B;AAE/BD,UAAAA,cAAc,EAAdA;AAF+B,SAAP;AAAA,OAAX,CAAf;AAID;AACF,GAPM,MAOA;AACL,QAAI4E,MAAM,KAAK,QAAf,EAAyB;AACvB,aAAO/B,SAAS,CAACW,QAAD,EAAWtG,IAAX,EAAiB,UAAA6B,GAAG;AAAA,eAClCA,GAAG,KAAK,IAAR,GAAeA,GAAG,IAAI2B,KAAJ,WAAIA,KAAJ,GAAa,EAAb,CAAlB,GAAqCA,KAArC,WAAqCA,KAArC,GAA8C,EADZ;AAAA,OAApB,CAAhB;AAGD,KAJD,MAIO,IAAIkE,MAAM,KAAK,KAAf,EAAsB;AAC3B,aAAO/B,SAAS,CAACW,QAAD,EAAWtG,IAAX,EAAiB;AAAA,eAAMwD,KAAN,WAAMA,KAAN,GAAe,EAAf;AAAA,OAAjB,CAAhB;AACD,KAFM,MAEA,IAAIkE,MAAM,KAAK,QAAf,EAAyB;AAC9B,aAAO/B,SAAS,CAACW,QAAD,EAAWtG,IAAX,EAAiB;AAAA,eAAM,IAAN;AAAA,OAAjB,CAAhB;AACD;AACF;;AACD,SAAOP,cAAP;AACD;;AAeD,YAAe;AACbkE,EAAAA,IAAI,EAAJA,IADa;AAEbc,EAAAA,OAAO,EAAPA,OAFa;AAGbkB,EAAAA,SAAS,EAATA,SAHa;AAIbxB,EAAAA,QAAQ,EAARA,QAJa;AAKbsD,EAAAA,WAAW,EAAXA;AALa,CAAf;;;;;;;;;;;"}
\ No newline at end of file
+{"version":3,"file":"dom-mutator.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["export const validAttributeName = /^[a-zA-Z:_][a-zA-Z0-9:_.-]*$/;\nconst nullController: MutationController = {\n  revert: () => {},\n};\n\nconst elements: Map<Element, ElementRecord> = new Map();\nconst mutations: Set<Mutation> = new Set();\n\nfunction getObserverInit(attr: string): MutationObserverInit {\n  return attr === 'html'\n    ? {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        characterData: true,\n      }\n    : {\n        childList: false,\n        subtree: false,\n        attributes: true,\n        attributeFilter: [attr],\n      };\n}\n\nfunction getElementRecord(element: Element): ElementRecord {\n  let record = elements.get(element);\n\n  if (!record) {\n    record = { element, attributes: {} };\n    elements.set(element, record);\n  }\n\n  return record;\n}\nfunction createElementPropertyRecord(\n  el: Element,\n  attr: string,\n  getCurrentValue: (el: Element) => any,\n  setValue: (el: Element, val: any) => void,\n  mutationRunner: (record: ElementPropertyRecord<any, any>) => void\n) {\n  const currentValue = getCurrentValue(el);\n  const record: ElementPropertyRecord<any, any> = {\n    isDirty: false,\n    originalValue: currentValue,\n    virtualValue: currentValue,\n    mutations: [],\n    el,\n    _positionTimeout: null,\n    _textTimeout: null,\n    observer: new MutationObserver(() => {\n      // enact a 1 second timeout that blocks subsequent firing of the\n      // observer until the timeout is complete. This will prevent multiple\n      // mutations from firing in quick succession, which can cause the\n      // mutation to be reverted before the DOM has a chance to update.\n      if (paused) return;\n      if (attr === 'position' && record._positionTimeout) return;\n      if (attr === 'html' && record._textTimeout) return;\n      else if (attr === 'position')\n        record._positionTimeout = setTimeout(() => {\n          record._positionTimeout = null;\n        }, 1000);\n      else if (attr === 'html')\n        record._textTimeout = setTimeout(() => {\n          record._textTimeout = null;\n        }, 1000);\n\n      const currentValue = getCurrentValue(el);\n      if (\n        attr === 'position' &&\n        currentValue.parentNode === record.virtualValue.parentNode &&\n        currentValue.insertBeforeNode === record.virtualValue.insertBeforeNode\n      )\n        return;\n      if (currentValue === record.virtualValue) return;\n      record.originalValue = currentValue;\n      mutationRunner(record);\n    }),\n    mutationRunner,\n    setValue,\n    getCurrentValue,\n  };\n  if (attr === 'position' && el.parentNode) {\n    record.observer.observe(el.parentNode, {\n      childList: true,\n      subtree: true,\n      attributes: false,\n      characterData: false,\n    });\n  } else {\n    record.observer.observe(el, getObserverInit(attr));\n  }\n  return record;\n}\n\nfunction queueIfNeeded(\n  val: string | null | ElementPositionWithDomNode,\n  record: ElementPropertyRecord<any, any>\n) {\n  const currentVal = record.getCurrentValue(record.el);\n  record.virtualValue = val;\n  if (val && typeof val !== 'string') {\n    if (\n      !currentVal ||\n      val.parentNode !== currentVal.parentNode ||\n      val.insertBeforeNode !== currentVal.insertBeforeNode\n    ) {\n      record.isDirty = true;\n      runDOMUpdates();\n    }\n  } else if (val !== currentVal) {\n    record.isDirty = true;\n    runDOMUpdates();\n  }\n}\n\nfunction htmlMutationRunner(record: HTMLRecord) {\n  let val = record.originalValue;\n  record.mutations.forEach(m => (val = m.mutate(val)));\n  queueIfNeeded(getTransformedHTML(val), record);\n}\nfunction classMutationRunner(record: ClassnameRecord) {\n  const val = new Set(record.originalValue.split(/\\s+/).filter(Boolean));\n  record.mutations.forEach(m => m.mutate(val));\n  queueIfNeeded(\n    Array.from(val)\n      .filter(Boolean)\n      .join(' '),\n    record\n  );\n}\n\nfunction attrMutationRunner(record: AttributeRecord) {\n  let val: string | null = record.originalValue;\n  record.mutations.forEach(m => (val = m.mutate(val)));\n  queueIfNeeded(val, record);\n}\n\nfunction _loadDOMNodes({\n  parentSelector,\n  insertBeforeSelector,\n}: ElementPosition): ElementPositionWithDomNode | null {\n  const parentNode = document.querySelector<HTMLElement>(parentSelector);\n  if (!parentNode) return null;\n  const insertBeforeNode = insertBeforeSelector\n    ? document.querySelector<HTMLElement>(insertBeforeSelector)\n    : null;\n  if (insertBeforeSelector && !insertBeforeNode) return null;\n  return {\n    parentNode,\n    insertBeforeNode,\n  };\n}\n\nfunction positionMutationRunner(record: PositionRecord) {\n  let val = record.originalValue;\n  record.mutations.forEach(m => {\n    const selectors = m.mutate();\n    const newNodes = _loadDOMNodes(selectors);\n    val = newNodes || val;\n  });\n  queueIfNeeded(val, record);\n}\n\nconst getHTMLValue = (el: Element) => el.innerHTML;\nconst setHTMLValue = (el: Element, value: string) => (el.innerHTML = value);\nfunction getElementHTMLRecord(element: Element): HTMLRecord {\n  const elementRecord = getElementRecord(element);\n  if (!elementRecord.html) {\n    elementRecord.html = createElementPropertyRecord(\n      element,\n      'html',\n      getHTMLValue,\n      setHTMLValue,\n      htmlMutationRunner\n    );\n  }\n  return elementRecord.html;\n}\n\nconst getElementPosition = (el: Element): ElementPositionWithDomNode => {\n  return {\n    parentNode: el.parentElement as HTMLElement,\n    insertBeforeNode: el.nextElementSibling as HTMLElement | null,\n  };\n};\nconst setElementPosition = (el: Element, value: ElementPositionWithDomNode) => {\n  if (\n    value.insertBeforeNode &&\n    !value.parentNode.contains(value.insertBeforeNode)\n  ) {\n    // skip position mutation - insertBeforeNode not a child of parent. happens\n    // when mutation observer for indvidual element fires out of order\n    return;\n  }\n  value.parentNode.insertBefore(el, value.insertBeforeNode);\n};\nfunction getElementPositionRecord(element: Element): PositionRecord {\n  const elementRecord = getElementRecord(element);\n  if (!elementRecord.position) {\n    elementRecord.position = createElementPropertyRecord(\n      element,\n      'position',\n      getElementPosition,\n      setElementPosition,\n      positionMutationRunner\n    );\n  }\n  return elementRecord.position;\n}\n\nconst setClassValue = (el: Element, val: string) =>\n  val ? (el.className = val) : el.removeAttribute('class');\nconst getClassValue = (el: Element) => el.className;\nfunction getElementClassRecord(el: Element): ClassnameRecord {\n  const elementRecord = getElementRecord(el);\n  if (!elementRecord.classes) {\n    elementRecord.classes = createElementPropertyRecord(\n      el,\n      'class',\n      getClassValue,\n      setClassValue,\n      classMutationRunner\n    );\n  }\n  return elementRecord.classes;\n}\n\nconst getAttrValue = (attrName: string) => (el: Element) =>\n  el.getAttribute(attrName) ?? null;\nconst setAttrValue = (attrName: string) => (el: Element, val: string | null) =>\n  val !== null ? el.setAttribute(attrName, val) : el.removeAttribute(attrName);\nfunction getElementAttributeRecord(el: Element, attr: string): AttributeRecord {\n  const elementRecord = getElementRecord(el);\n  if (!elementRecord.attributes[attr]) {\n    elementRecord.attributes[attr] = createElementPropertyRecord(\n      el,\n      attr,\n      getAttrValue(attr),\n      setAttrValue(attr),\n      attrMutationRunner\n    );\n  }\n  return elementRecord.attributes[attr];\n}\n\nfunction deleteElementPropertyRecord(el: Element, attr: string) {\n  const element = elements.get(el);\n  if (!element) return;\n  if (attr === 'html') {\n    element.html?.observer?.disconnect();\n    delete element.html;\n  } else if (attr === 'class') {\n    element.classes?.observer?.disconnect();\n    delete element.classes;\n  } else if (attr === 'position') {\n    element.position?.observer?.disconnect();\n    delete element.position;\n  } else {\n    element.attributes?.[attr]?.observer?.disconnect();\n    delete element.attributes[attr];\n  }\n}\n\nlet transformContainer: HTMLDivElement;\nfunction getTransformedHTML(html: string) {\n  if (!transformContainer) {\n    transformContainer = document.createElement('div');\n  }\n  transformContainer.innerHTML = html;\n  return transformContainer.innerHTML;\n}\n\nfunction setPropertyValue<T extends ElementPropertyRecord<any, any>>(\n  el: Element,\n  attr: string,\n  m: T\n) {\n  if (!m.isDirty) return;\n  m.isDirty = false;\n  const val = m.virtualValue;\n  if (!m.mutations.length) {\n    deleteElementPropertyRecord(el, attr);\n  }\n  m.setValue(el, val);\n}\n\nfunction setValue(m: ElementRecord, el: Element) {\n  m.html && setPropertyValue<HTMLRecord>(el, 'html', m.html);\n  m.classes && setPropertyValue<ClassnameRecord>(el, 'class', m.classes);\n  m.position && setPropertyValue<PositionRecord>(el, 'position', m.position);\n  Object.keys(m.attributes).forEach(attr => {\n    setPropertyValue<AttributeRecord>(el, attr, m.attributes[attr]);\n  });\n}\n\nfunction runDOMUpdates() {\n  elements.forEach(setValue);\n}\n\n// find or create ElementPropertyRecord, add mutation to it, then run\nfunction startMutating(mutation: Mutation, element: Element) {\n  let record: ElementPropertyRecord<any, any> | null = null;\n  if (mutation.kind === 'html') {\n    record = getElementHTMLRecord(element);\n  } else if (mutation.kind === 'class') {\n    record = getElementClassRecord(element);\n  } else if (mutation.kind === 'attribute') {\n    record = getElementAttributeRecord(element, mutation.attribute);\n  } else if (mutation.kind === 'position') {\n    record = getElementPositionRecord(element);\n  }\n  if (!record) return;\n  record.mutations.push(mutation);\n  record.mutationRunner(record);\n}\n\n// get (existing) ElementPropertyRecord, remove mutation from it, then run\nfunction stopMutating(mutation: Mutation, el: Element) {\n  let record: ElementPropertyRecord<any, any> | null = null;\n  if (mutation.kind === 'html') {\n    record = getElementHTMLRecord(el);\n  } else if (mutation.kind === 'class') {\n    record = getElementClassRecord(el);\n  } else if (mutation.kind === 'attribute') {\n    record = getElementAttributeRecord(el, mutation.attribute);\n  } else if (mutation.kind === 'position') {\n    record = getElementPositionRecord(el);\n  }\n  if (!record) return;\n  const index = record.mutations.indexOf(mutation);\n  if (index !== -1) record.mutations.splice(index, 1);\n  record.mutationRunner(record);\n}\n\n// maintain list of elements associated with mutation\nfunction refreshElementsSet(mutation: Mutation) {\n  // if a position mutation has already found an element to move, don't move\n  // any more elements\n  if (mutation.kind === 'position' && mutation.elements.size === 1) return;\n\n  const existingElements = new Set(mutation.elements);\n  const matchingElements = document.querySelectorAll(mutation.selector);\n  matchingElements.forEach(el => {\n    if (!existingElements.has(el)) {\n      mutation.elements.add(el);\n      startMutating(mutation, el);\n    }\n  });\n}\n\nfunction revertMutation(mutation: Mutation) {\n  mutation.elements.forEach(el => stopMutating(mutation, el));\n  mutation.elements.clear();\n  mutations.delete(mutation);\n}\n\nfunction refreshAllElementSets() {\n  mutations.forEach(refreshElementsSet);\n}\n\n// pause/resume global observer\nlet paused: boolean = false;\nexport function pauseGlobalObserver() {\n  paused = true;\n}\nexport function isGlobalObserverPaused() {\n  return paused;\n}\nexport function resumeGlobalObserver() {\n  paused = false;\n  refreshAllElementSets();\n}\n\n// Observer for elements that don't exist in the DOM yet\nlet observer: MutationObserver;\n\nexport function disconnectGlobalObserver() {\n  observer && observer.disconnect();\n}\nexport function connectGlobalObserver() {\n  if (typeof document === 'undefined') return;\n  if (!observer) {\n    observer = new MutationObserver(() => {\n      refreshAllElementSets();\n    });\n  }\n  refreshAllElementSets();\n  observer.observe(document.documentElement, {\n    childList: true,\n    subtree: true,\n    attributes: false,\n    characterData: false,\n  });\n}\n// run on init\nconnectGlobalObserver();\n\nexport const getHtmlMutationRecordsFromSelector = (selector: string) => {\n  const elements = document.querySelectorAll(selector);\n  const records: HTMLRecord[] = [];\n  elements.forEach(el => {\n    const record = getElementHTMLRecord(el);\n    if (record) records.push(record);\n  });\n  return records;\n};\n\nfunction newMutation(m: Mutation): MutationController {\n  // Not in a browser\n  if (typeof document === 'undefined') return nullController;\n  // add to global index of mutations\n  mutations.add(m);\n  // run refresh on init to establish list of elements associated w/ mutation\n  refreshElementsSet(m);\n  return {\n    revert: () => {\n      revertMutation(m);\n    },\n  };\n}\n\nfunction html(\n  selector: HTMLMutation['selector'],\n  mutate: HTMLMutation['mutate']\n) {\n  return newMutation({\n    kind: 'html',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction position(\n  selector: PositionMutation['selector'],\n  mutate: PositionMutation['mutate']\n) {\n  return newMutation({\n    kind: 'position',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction classes(\n  selector: ClassnameMutation['selector'],\n  mutate: ClassnameMutation['mutate']\n) {\n  return newMutation({\n    kind: 'class',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction attribute(\n  selector: AttrMutation['selector'],\n  attribute: AttrMutation['attribute'],\n  mutate: AttrMutation['mutate']\n) {\n  if (!validAttributeName.test(attribute)) return nullController;\n\n  if (attribute === 'class' || attribute === 'className') {\n    return classes(selector, classnames => {\n      const mutatedClassnames = mutate(Array.from(classnames).join(' '));\n      classnames.clear();\n      if (!mutatedClassnames) return;\n      mutatedClassnames\n        .split(/\\s+/g)\n        .filter(Boolean)\n        .forEach(c => classnames.add(c));\n    });\n  }\n\n  return newMutation({\n    kind: 'attribute',\n    attribute,\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction declarative({\n  selector,\n  action,\n  value,\n  attribute: attr,\n  parentSelector,\n  insertBeforeSelector,\n}: DeclarativeMutation): MutationController {\n  if (attr === 'html') {\n    if (action === 'append') {\n      return html(selector, val => val + (value ?? ''));\n    } else if (action === 'set') {\n      return html(selector, () => value ?? '');\n    }\n  } else if (attr === 'class') {\n    if (action === 'append') {\n      return classes(selector, val => {\n        if (value) val.add(value);\n      });\n    } else if (action === 'remove') {\n      return classes(selector, val => {\n        if (value) val.delete(value);\n      });\n    } else if (action === 'set') {\n      return classes(selector, val => {\n        val.clear();\n        if (value) val.add(value);\n      });\n    }\n  } else if (attr === 'position') {\n    if (action === 'set' && parentSelector) {\n      return position(selector, () => ({\n        insertBeforeSelector,\n        parentSelector,\n      }));\n    }\n  } else {\n    if (action === 'append') {\n      return attribute(selector, attr, val =>\n        val !== null ? val + (value ?? '') : value ?? ''\n      );\n    } else if (action === 'set') {\n      return attribute(selector, attr, () => value ?? '');\n    } else if (action === 'remove') {\n      return attribute(selector, attr, () => null);\n    }\n  }\n  return nullController;\n}\n\nexport type MutationController = {\n  revert: () => void;\n};\n\nexport type DeclarativeMutation = {\n  selector: string;\n  attribute: string;\n  action: 'append' | 'set' | 'remove';\n  value?: string;\n  parentSelector?: string;\n  insertBeforeSelector?: string;\n};\n\nexport default {\n  html,\n  classes,\n  attribute,\n  position,\n  declarative,\n};\n"],"names":["validAttributeName","nullController","revert","elements","Map","mutations","Set","getObserverInit","attr","childList","subtree","attributes","characterData","attributeFilter","getElementRecord","element","record","get","set","createElementPropertyRecord","el","getCurrentValue","setValue","mutationRunner","currentValue","isDirty","originalValue","virtualValue","_positionTimeout","_textTimeout","observer","MutationObserver","paused","setTimeout","parentNode","insertBeforeNode","observe","queueIfNeeded","val","currentVal","runDOMUpdates","htmlMutationRunner","forEach","m","mutate","getTransformedHTML","classMutationRunner","split","filter","Boolean","Array","from","join","attrMutationRunner","_loadDOMNodes","_ref","parentSelector","insertBeforeSelector","document","querySelector","positionMutationRunner","selectors","newNodes","getHTMLValue","innerHTML","setHTMLValue","value","getElementHTMLRecord","elementRecord","html","getElementPosition","parentElement","nextElementSibling","setElementPosition","contains","insertBefore","getElementPositionRecord","position","setClassValue","className","removeAttribute","getClassValue","getElementClassRecord","classes","getAttrValue","attrName","_el$getAttribute","getAttribute","setAttrValue","setAttribute","getElementAttributeRecord","deleteElementPropertyRecord","_element$html","disconnect","_element$classes","_element$position","_element$attributes","transformContainer","createElement","setPropertyValue","length","Object","keys","startMutating","mutation","kind","attribute","push","stopMutating","index","indexOf","splice","refreshElementsSet","size","existingElements","matchingElements","querySelectorAll","selector","has","add","revertMutation","clear","refreshAllElementSets","pauseGlobalObserver","isGlobalObserverPaused","resumeGlobalObserver","disconnectGlobalObserver","connectGlobalObserver","documentElement","getHtmlMutationRecordsFromSelector","records","newMutation","test","classnames","mutatedClassnames","c","declarative","_ref2","action"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/dom-mutator/dist/dom-mutator.cjs.production.min.js b/node_modules/dom-mutator/dist/dom-mutator.cjs.production.min.js
index a37928b..3978067 100644
--- a/node_modules/dom-mutator/dist/dom-mutator.cjs.production.min.js
+++ b/node_modules/dom-mutator/dist/dom-mutator.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=/^[a-zA-Z:_][a-zA-Z0-9:_.-]*$/,t={revert:function(){}},n=new Map,r=new Set;function i(e){var t=n.get(e);return t||n.set(e,t={element:e,attributes:{}}),t}function o(e,t,n,r,i){var o=n(e),u={isDirty:!1,originalValue:o,virtualValue:o,mutations:[],el:e,_positionTimeout:null,observer:new MutationObserver((function(){if(!(w||"position"===t&&u._positionTimeout)){"position"===t&&(u._positionTimeout=setTimeout((function(){u._positionTimeout=null}),1e3));var r=n(e);"position"===t&&r.parentNode===u.virtualValue.parentNode&&r.insertBeforeNode===u.virtualValue.insertBeforeNode||r!==u.virtualValue&&(u.originalValue=r,i(u))}})),mutationRunner:i,setValue:r,getCurrentValue:n};return"position"===t&&e.parentNode?u.observer.observe(e.parentNode,{childList:!0,subtree:!0,attributes:!1,characterData:!1}):u.observer.observe(e,function(e){return"html"===e?{childList:!0,subtree:!0,attributes:!0,characterData:!0}:{childList:!1,subtree:!1,attributes:!0,attributeFilter:[e]}}(t)),u}function u(e,t){var n=t.getCurrentValue(t.el);t.virtualValue=e,e&&"string"!=typeof e?n&&e.parentNode===n.parentNode&&e.insertBeforeNode===n.insertBeforeNode||(t.isDirty=!0,E()):e!==n&&(t.isDirty=!0,E())}function a(e){var t=e.originalValue;e.mutations.forEach((function(e){return t=e.mutate(t)})),u(function(e){return h||(h=document.createElement("div")),h.innerHTML=e,h.innerHTML}(t),e)}function s(e){var t=new Set(e.originalValue.split(/\s+/).filter(Boolean));e.mutations.forEach((function(e){return e.mutate(t)})),u(Array.from(t).filter(Boolean).join(" "),e)}function l(e){var t=e.originalValue;e.mutations.forEach((function(e){return t=e.mutate(t)})),u(t,e)}function c(e){var t=e.originalValue;e.mutations.forEach((function(e){var n=function(e){var t=e.insertBeforeSelector,n=document.querySelector(e.parentSelector);if(!n)return null;var r=t?document.querySelector(t):null;return t&&!r?null:{parentNode:n,insertBeforeNode:r}}(e.mutate());t=n||t})),u(t,e)}var f=function(e){return e.innerHTML},d=function(e,t){return e.innerHTML=t};function m(e){var t=i(e);return t.html||(t.html=o(e,"html",f,d,a)),t.html}var v=function(e){return{parentNode:e.parentElement,insertBeforeNode:e.nextElementSibling}},p=function(e,t){t.insertBeforeNode&&!t.parentNode.contains(t.insertBeforeNode)||t.parentNode.insertBefore(e,t.insertBeforeNode)};function b(e){var t=i(e);return t.position||(t.position=o(e,"position",v,p,c)),t.position}var h,N=function(e,t){return t?e.className=t:e.removeAttribute("class")},S=function(e){return e.className};function g(e){var t=i(e);return t.classes||(t.classes=o(e,"class",S,N,s)),t.classes}function y(e,t){var n,r=i(e);return r.attributes[t]||(r.attributes[t]=o(e,t,(n=t,function(e){var t;return null!=(t=e.getAttribute(n))?t:null}),function(e){return function(t,n){return null!==n?t.setAttribute(e,n):t.removeAttribute(e)}}(t),l)),r.attributes[t]}function B(e,t,r){if(r.isDirty){r.isDirty=!1;var i=r.virtualValue;r.mutations.length||function(e,t){var r,i,o=n.get(e);if(o)if("html"===t)null==(r=o.html)||null==(i=r.observer)||i.disconnect(),delete o.html;else if("class"===t){var u,a;null==(u=o.classes)||null==(a=u.observer)||a.disconnect(),delete o.classes}else if("position"===t){var s,l;null==(s=o.position)||null==(l=s.observer)||l.disconnect(),delete o.position}else{var c,f,d;null==(c=o.attributes)||null==(f=c[t])||null==(d=f.observer)||d.disconnect(),delete o.attributes[t]}}(e,t),r.setValue(e,i)}}function V(e,t){e.html&&B(t,"html",e.html),e.classes&&B(t,"class",e.classes),e.position&&B(t,"position",e.position),Object.keys(e.attributes).forEach((function(n){B(t,n,e.attributes[n])}))}function E(){n.forEach(V)}function k(e){if("position"!==e.kind||1!==e.elements.size){var t=new Set(e.elements);document.querySelectorAll(e.selector).forEach((function(n){t.has(n)||(e.elements.add(n),function(e,t){var n=null;"html"===e.kind?n=m(t):"class"===e.kind?n=g(t):"attribute"===e.kind?n=y(t,e.attribute):"position"===e.kind&&(n=b(t)),n&&(n.mutations.push(e),n.mutationRunner(n))}(e,n))}))}}function x(){r.forEach(k)}var A,w=!1;function O(){"undefined"!=typeof document&&(A||(A=new MutationObserver((function(){x()}))),x(),A.observe(document.documentElement,{childList:!0,subtree:!0,attributes:!1,characterData:!1}))}function M(e){return"undefined"==typeof document?t:(r.add(e),k(e),{revert:function(){var t;(t=e).elements.forEach((function(e){return function(e,t){var n=null;if("html"===e.kind?n=m(t):"class"===e.kind?n=g(t):"attribute"===e.kind?n=y(t,e.attribute):"position"===e.kind&&(n=b(t)),n){var r=n.mutations.indexOf(e);-1!==r&&n.mutations.splice(r,1),n.mutationRunner(n)}}(t,e)})),t.elements.clear(),r.delete(t)}})}function T(e,t){return M({kind:"html",elements:new Set,mutate:t,selector:e})}function D(e,t){return M({kind:"position",elements:new Set,mutate:t,selector:e})}function L(e,t){return M({kind:"class",elements:new Set,mutate:t,selector:e})}function _(n,r,i){return e.test(r)?"class"===r||"className"===r?L(n,(function(e){var t=i(Array.from(e).join(" "));e.clear(),t&&t.split(/\s+/g).filter(Boolean).forEach((function(t){return e.add(t)}))})):M({kind:"attribute",attribute:r,elements:new Set,mutate:i,selector:n}):t}O();var G={html:T,classes:L,attribute:_,position:D,declarative:function(e){var n=e.selector,r=e.action,i=e.value,o=e.attribute,u=e.parentSelector,a=e.insertBeforeSelector;if("html"===o){if("append"===r)return T(n,(function(e){return e+(null!=i?i:"")}));if("set"===r)return T(n,(function(){return null!=i?i:""}))}else if("class"===o){if("append"===r)return L(n,(function(e){i&&e.add(i)}));if("remove"===r)return L(n,(function(e){i&&e.delete(i)}));if("set"===r)return L(n,(function(e){e.clear(),i&&e.add(i)}))}else if("position"===o){if("set"===r&&u)return D(n,(function(){return{insertBeforeSelector:a,parentSelector:u}}))}else{if("append"===r)return _(n,o,(function(e){return null!==e?e+(null!=i?i:""):null!=i?i:""}));if("set"===r)return _(n,o,(function(){return null!=i?i:""}));if("remove"===r)return _(n,o,(function(){return null}))}return t}};exports.connectGlobalObserver=O,exports.default=G,exports.disconnectGlobalObserver=function(){A&&A.disconnect()},exports.getHtmlMutationRecordsFromSelector=function(e){var t=document.querySelectorAll(e),n=[];return t.forEach((function(e){var t=m(e);t&&n.push(t)})),n},exports.isGlobalObserverPaused=function(){return w},exports.pauseGlobalObserver=function(){w=!0},exports.resumeGlobalObserver=function(){w=!1,x()},exports.validAttributeName=e;
+"use strict";var e=/^[a-zA-Z:_][a-zA-Z0-9:_.-]*$/,t={revert:function(){}},n=new Map,r=new Set;function i(e){var t=n.get(e);return t||n.set(e,t={element:e,attributes:{}}),t}function o(e,t,n,r,i){var o=n(e),u={isDirty:!1,originalValue:o,virtualValue:o,mutations:[],el:e,_positionTimeout:null,_textTimeout:null,observer:new MutationObserver((function(){if(!A&&!("position"===t&&u._positionTimeout||"html"===t&&u._textTimeout)){"position"===t?u._positionTimeout=setTimeout((function(){u._positionTimeout=null}),1e3):"html"===t&&(u._textTimeout=setTimeout((function(){u._textTimeout=null}),1e3));var r=n(e);"position"===t&&r.parentNode===u.virtualValue.parentNode&&r.insertBeforeNode===u.virtualValue.insertBeforeNode||r!==u.virtualValue&&(u.originalValue=r,i(u))}})),mutationRunner:i,setValue:r,getCurrentValue:n};return"position"===t&&e.parentNode?u.observer.observe(e.parentNode,{childList:!0,subtree:!0,attributes:!1,characterData:!1}):u.observer.observe(e,function(e){return"html"===e?{childList:!0,subtree:!0,attributes:!0,characterData:!0}:{childList:!1,subtree:!1,attributes:!0,attributeFilter:[e]}}(t)),u}function u(e,t){var n=t.getCurrentValue(t.el);t.virtualValue=e,e&&"string"!=typeof e?n&&e.parentNode===n.parentNode&&e.insertBeforeNode===n.insertBeforeNode||(t.isDirty=!0,E()):e!==n&&(t.isDirty=!0,E())}function l(e){var t=e.originalValue;e.mutations.forEach((function(e){return t=e.mutate(t)})),u(function(e){return h||(h=document.createElement("div")),h.innerHTML=e,h.innerHTML}(t),e)}function a(e){var t=new Set(e.originalValue.split(/\s+/).filter(Boolean));e.mutations.forEach((function(e){return e.mutate(t)})),u(Array.from(t).filter(Boolean).join(" "),e)}function s(e){var t=e.originalValue;e.mutations.forEach((function(e){return t=e.mutate(t)})),u(t,e)}function c(e){var t=e.originalValue;e.mutations.forEach((function(e){var n=function(e){var t=e.insertBeforeSelector,n=document.querySelector(e.parentSelector);if(!n)return null;var r=t?document.querySelector(t):null;return t&&!r?null:{parentNode:n,insertBeforeNode:r}}(e.mutate());t=n||t})),u(t,e)}var f=function(e){return e.innerHTML},m=function(e,t){return e.innerHTML=t};function d(e){var t=i(e);return t.html||(t.html=o(e,"html",f,m,l)),t.html}var v=function(e){return{parentNode:e.parentElement,insertBeforeNode:e.nextElementSibling}},p=function(e,t){t.insertBeforeNode&&!t.parentNode.contains(t.insertBeforeNode)||t.parentNode.insertBefore(e,t.insertBeforeNode)};function b(e){var t=i(e);return t.position||(t.position=o(e,"position",v,p,c)),t.position}var h,N=function(e,t){return t?e.className=t:e.removeAttribute("class")},S=function(e){return e.className};function g(e){var t=i(e);return t.classes||(t.classes=o(e,"class",S,N,a)),t.classes}function B(e,t){var n,r=i(e);return r.attributes[t]||(r.attributes[t]=o(e,t,(n=t,function(e){var t;return null!=(t=e.getAttribute(n))?t:null}),function(e){return function(t,n){return null!==n?t.setAttribute(e,n):t.removeAttribute(e)}}(t),s)),r.attributes[t]}function V(e,t,r){if(r.isDirty){r.isDirty=!1;var i=r.virtualValue;r.mutations.length||function(e,t){var r,i=n.get(e);if(i)if("html"===t)null==(r=i.html)||null==(r=r.observer)||r.disconnect(),delete i.html;else if("class"===t){var o;null==(o=i.classes)||null==(o=o.observer)||o.disconnect(),delete i.classes}else if("position"===t){var u;null==(u=i.position)||null==(u=u.observer)||u.disconnect(),delete i.position}else{var l;null==(l=i.attributes)||null==(l=l[t])||null==(l=l.observer)||l.disconnect(),delete i.attributes[t]}}(e,t),r.setValue(e,i)}}function y(e,t){e.html&&V(t,"html",e.html),e.classes&&V(t,"class",e.classes),e.position&&V(t,"position",e.position),Object.keys(e.attributes).forEach((function(n){V(t,n,e.attributes[n])}))}function E(){n.forEach(y)}function k(e){if("position"!==e.kind||1!==e.elements.size){var t=new Set(e.elements);document.querySelectorAll(e.selector).forEach((function(n){t.has(n)||(e.elements.add(n),function(e,t){var n=null;"html"===e.kind?n=d(t):"class"===e.kind?n=g(t):"attribute"===e.kind?n=B(t,e.attribute):"position"===e.kind&&(n=b(t)),n&&(n.mutations.push(e),n.mutationRunner(n))}(e,n))}))}}function x(){r.forEach(k)}var T,A=!1;function w(){"undefined"!=typeof document&&(T||(T=new MutationObserver((function(){x()}))),x(),T.observe(document.documentElement,{childList:!0,subtree:!0,attributes:!1,characterData:!1}))}function _(e){return"undefined"==typeof document?t:(r.add(e),k(e),{revert:function(){var t;(t=e).elements.forEach((function(e){return function(e,t){var n=null;if("html"===e.kind?n=d(t):"class"===e.kind?n=g(t):"attribute"===e.kind?n=B(t,e.attribute):"position"===e.kind&&(n=b(t)),n){var r=n.mutations.indexOf(e);-1!==r&&n.mutations.splice(r,1),n.mutationRunner(n)}}(t,e)})),t.elements.clear(),r.delete(t)}})}function O(e,t){return _({kind:"html",elements:new Set,mutate:t,selector:e})}function D(e,t){return _({kind:"position",elements:new Set,mutate:t,selector:e})}function L(e,t){return _({kind:"class",elements:new Set,mutate:t,selector:e})}function M(n,r,i){return e.test(r)?"class"===r||"className"===r?L(n,(function(e){var t=i(Array.from(e).join(" "));e.clear(),t&&t.split(/\s+/g).filter(Boolean).forEach((function(t){return e.add(t)}))})):_({kind:"attribute",attribute:r,elements:new Set,mutate:i,selector:n}):t}w();var G={html:O,classes:L,attribute:M,position:D,declarative:function(e){var n=e.selector,r=e.action,i=e.value,o=e.attribute,u=e.parentSelector,l=e.insertBeforeSelector;if("html"===o){if("append"===r)return O(n,(function(e){return e+(null!=i?i:"")}));if("set"===r)return O(n,(function(){return null!=i?i:""}))}else if("class"===o){if("append"===r)return L(n,(function(e){i&&e.add(i)}));if("remove"===r)return L(n,(function(e){i&&e.delete(i)}));if("set"===r)return L(n,(function(e){e.clear(),i&&e.add(i)}))}else if("position"===o){if("set"===r&&u)return D(n,(function(){return{insertBeforeSelector:l,parentSelector:u}}))}else{if("append"===r)return M(n,o,(function(e){return null!==e?e+(null!=i?i:""):null!=i?i:""}));if("set"===r)return M(n,o,(function(){return null!=i?i:""}));if("remove"===r)return M(n,o,(function(){return null}))}return t}};exports.connectGlobalObserver=w,exports.default=G,exports.disconnectGlobalObserver=function(){T&&T.disconnect()},exports.getHtmlMutationRecordsFromSelector=function(e){var t=document.querySelectorAll(e),n=[];return t.forEach((function(e){var t=d(e);t&&n.push(t)})),n},exports.isGlobalObserverPaused=function(){return A},exports.pauseGlobalObserver=function(){A=!0},exports.resumeGlobalObserver=function(){A=!1,x()},exports.validAttributeName=e;
 //# sourceMappingURL=dom-mutator.cjs.production.min.js.map
diff --git a/node_modules/dom-mutator/dist/dom-mutator.cjs.production.min.js.map b/node_modules/dom-mutator/dist/dom-mutator.cjs.production.min.js.map
index dec158a..d1d95db 100644
--- a/node_modules/dom-mutator/dist/dom-mutator.cjs.production.min.js.map
+++ b/node_modules/dom-mutator/dist/dom-mutator.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"dom-mutator.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["export const validAttributeName = /^[a-zA-Z:_][a-zA-Z0-9:_.-]*$/;\nconst nullController: MutationController = {\n  revert: () => {},\n};\n\nconst elements: Map<Element, ElementRecord> = new Map();\nconst mutations: Set<Mutation> = new Set();\n\nfunction getObserverInit(attr: string): MutationObserverInit {\n  return attr === 'html'\n    ? {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        characterData: true,\n      }\n    : {\n        childList: false,\n        subtree: false,\n        attributes: true,\n        attributeFilter: [attr],\n      };\n}\n\nfunction getElementRecord(element: Element): ElementRecord {\n  let record = elements.get(element);\n\n  if (!record) {\n    record = { element, attributes: {} };\n    elements.set(element, record);\n  }\n\n  return record;\n}\nfunction createElementPropertyRecord(\n  el: Element,\n  attr: string,\n  getCurrentValue: (el: Element) => any,\n  setValue: (el: Element, val: any) => void,\n  mutationRunner: (record: ElementPropertyRecord<any, any>) => void\n) {\n  const currentValue = getCurrentValue(el);\n  const record: ElementPropertyRecord<any, any> = {\n    isDirty: false,\n    originalValue: currentValue,\n    virtualValue: currentValue,\n    mutations: [],\n    el,\n    _positionTimeout: null,\n    observer: new MutationObserver(() => {\n      // enact a 1 second timeout that blocks subsequent firing of the\n      // observer until the timeout is complete. This will prevent multiple\n      // mutations from firing in quick succession, which can cause the\n      // mutation to be reverted before the DOM has a chance to update.\n      if (paused) return;\n      if (attr === 'position' && record._positionTimeout) return;\n      else if (attr === 'position')\n        record._positionTimeout = setTimeout(() => {\n          record._positionTimeout = null;\n        }, 1000);\n\n      const currentValue = getCurrentValue(el);\n      if (\n        attr === 'position' &&\n        currentValue.parentNode === record.virtualValue.parentNode &&\n        currentValue.insertBeforeNode === record.virtualValue.insertBeforeNode\n      )\n        return;\n      if (currentValue === record.virtualValue) return;\n      record.originalValue = currentValue;\n      mutationRunner(record);\n    }),\n    mutationRunner,\n    setValue,\n    getCurrentValue,\n  };\n  if (attr === 'position' && el.parentNode) {\n    record.observer.observe(el.parentNode, {\n      childList: true,\n      subtree: true,\n      attributes: false,\n      characterData: false,\n    });\n  } else {\n    record.observer.observe(el, getObserverInit(attr));\n  }\n  return record;\n}\n\nfunction queueIfNeeded(\n  val: string | null | ElementPositionWithDomNode,\n  record: ElementPropertyRecord<any, any>\n) {\n  const currentVal = record.getCurrentValue(record.el);\n  record.virtualValue = val;\n  if (val && typeof val !== 'string') {\n    if (\n      !currentVal ||\n      val.parentNode !== currentVal.parentNode ||\n      val.insertBeforeNode !== currentVal.insertBeforeNode\n    ) {\n      record.isDirty = true;\n      runDOMUpdates();\n    }\n  } else if (val !== currentVal) {\n    record.isDirty = true;\n    runDOMUpdates();\n  }\n}\n\nfunction htmlMutationRunner(record: HTMLRecord) {\n  let val = record.originalValue;\n  record.mutations.forEach(m => (val = m.mutate(val)));\n  queueIfNeeded(getTransformedHTML(val), record);\n}\nfunction classMutationRunner(record: ClassnameRecord) {\n  const val = new Set(record.originalValue.split(/\\s+/).filter(Boolean));\n  record.mutations.forEach(m => m.mutate(val));\n  queueIfNeeded(\n    Array.from(val)\n      .filter(Boolean)\n      .join(' '),\n    record\n  );\n}\n\nfunction attrMutationRunner(record: AttributeRecord) {\n  let val: string | null = record.originalValue;\n  record.mutations.forEach(m => (val = m.mutate(val)));\n  queueIfNeeded(val, record);\n}\n\nfunction _loadDOMNodes({\n  parentSelector,\n  insertBeforeSelector,\n}: ElementPosition): ElementPositionWithDomNode | null {\n  const parentNode = document.querySelector<HTMLElement>(parentSelector);\n  if (!parentNode) return null;\n  const insertBeforeNode = insertBeforeSelector\n    ? document.querySelector<HTMLElement>(insertBeforeSelector)\n    : null;\n  if (insertBeforeSelector && !insertBeforeNode) return null;\n  return {\n    parentNode,\n    insertBeforeNode,\n  };\n}\n\nfunction positionMutationRunner(record: PositionRecord) {\n  let val = record.originalValue;\n  record.mutations.forEach(m => {\n    const selectors = m.mutate();\n    const newNodes = _loadDOMNodes(selectors);\n    val = newNodes || val;\n  });\n  queueIfNeeded(val, record);\n}\n\nconst getHTMLValue = (el: Element) => el.innerHTML;\nconst setHTMLValue = (el: Element, value: string) => (el.innerHTML = value);\nfunction getElementHTMLRecord(element: Element): HTMLRecord {\n  const elementRecord = getElementRecord(element);\n  if (!elementRecord.html) {\n    elementRecord.html = createElementPropertyRecord(\n      element,\n      'html',\n      getHTMLValue,\n      setHTMLValue,\n      htmlMutationRunner\n    );\n  }\n  return elementRecord.html;\n}\n\nconst getElementPosition = (el: Element): ElementPositionWithDomNode => {\n  return {\n    parentNode: el.parentElement as HTMLElement,\n    insertBeforeNode: el.nextElementSibling as HTMLElement | null,\n  };\n};\nconst setElementPosition = (el: Element, value: ElementPositionWithDomNode) => {\n  if (\n    value.insertBeforeNode &&\n    !value.parentNode.contains(value.insertBeforeNode)\n  ) {\n    // skip position mutation - insertBeforeNode not a child of parent. happens\n    // when mutation observer for indvidual element fires out of order\n    return;\n  }\n  value.parentNode.insertBefore(el, value.insertBeforeNode);\n};\nfunction getElementPositionRecord(element: Element): PositionRecord {\n  const elementRecord = getElementRecord(element);\n  if (!elementRecord.position) {\n    elementRecord.position = createElementPropertyRecord(\n      element,\n      'position',\n      getElementPosition,\n      setElementPosition,\n      positionMutationRunner\n    );\n  }\n  return elementRecord.position;\n}\n\nconst setClassValue = (el: Element, val: string) =>\n  val ? (el.className = val) : el.removeAttribute('class');\nconst getClassValue = (el: Element) => el.className;\nfunction getElementClassRecord(el: Element): ClassnameRecord {\n  const elementRecord = getElementRecord(el);\n  if (!elementRecord.classes) {\n    elementRecord.classes = createElementPropertyRecord(\n      el,\n      'class',\n      getClassValue,\n      setClassValue,\n      classMutationRunner\n    );\n  }\n  return elementRecord.classes;\n}\n\nconst getAttrValue = (attrName: string) => (el: Element) =>\n  el.getAttribute(attrName) ?? null;\nconst setAttrValue = (attrName: string) => (el: Element, val: string | null) =>\n  val !== null ? el.setAttribute(attrName, val) : el.removeAttribute(attrName);\nfunction getElementAttributeRecord(el: Element, attr: string): AttributeRecord {\n  const elementRecord = getElementRecord(el);\n  if (!elementRecord.attributes[attr]) {\n    elementRecord.attributes[attr] = createElementPropertyRecord(\n      el,\n      attr,\n      getAttrValue(attr),\n      setAttrValue(attr),\n      attrMutationRunner\n    );\n  }\n  return elementRecord.attributes[attr];\n}\n\nfunction deleteElementPropertyRecord(el: Element, attr: string) {\n  const element = elements.get(el);\n  if (!element) return;\n  if (attr === 'html') {\n    element.html?.observer?.disconnect();\n    delete element.html;\n  } else if (attr === 'class') {\n    element.classes?.observer?.disconnect();\n    delete element.classes;\n  } else if (attr === 'position') {\n    element.position?.observer?.disconnect();\n    delete element.position;\n  } else {\n    element.attributes?.[attr]?.observer?.disconnect();\n    delete element.attributes[attr];\n  }\n}\n\nlet transformContainer: HTMLDivElement;\nfunction getTransformedHTML(html: string) {\n  if (!transformContainer) {\n    transformContainer = document.createElement('div');\n  }\n  transformContainer.innerHTML = html;\n  return transformContainer.innerHTML;\n}\n\nfunction setPropertyValue<T extends ElementPropertyRecord<any, any>>(\n  el: Element,\n  attr: string,\n  m: T\n) {\n  if (!m.isDirty) return;\n  m.isDirty = false;\n  const val = m.virtualValue;\n  if (!m.mutations.length) {\n    deleteElementPropertyRecord(el, attr);\n  }\n  m.setValue(el, val);\n}\n\nfunction setValue(m: ElementRecord, el: Element) {\n  m.html && setPropertyValue<HTMLRecord>(el, 'html', m.html);\n  m.classes && setPropertyValue<ClassnameRecord>(el, 'class', m.classes);\n  m.position && setPropertyValue<PositionRecord>(el, 'position', m.position);\n  Object.keys(m.attributes).forEach(attr => {\n    setPropertyValue<AttributeRecord>(el, attr, m.attributes[attr]);\n  });\n}\n\nfunction runDOMUpdates() {\n  elements.forEach(setValue);\n}\n\n// find or create ElementPropertyRecord, add mutation to it, then run\nfunction startMutating(mutation: Mutation, element: Element) {\n  let record: ElementPropertyRecord<any, any> | null = null;\n  if (mutation.kind === 'html') {\n    record = getElementHTMLRecord(element);\n  } else if (mutation.kind === 'class') {\n    record = getElementClassRecord(element);\n  } else if (mutation.kind === 'attribute') {\n    record = getElementAttributeRecord(element, mutation.attribute);\n  } else if (mutation.kind === 'position') {\n    record = getElementPositionRecord(element);\n  }\n  if (!record) return;\n  record.mutations.push(mutation);\n  record.mutationRunner(record);\n}\n\n// get (existing) ElementPropertyRecord, remove mutation from it, then run\nfunction stopMutating(mutation: Mutation, el: Element) {\n  let record: ElementPropertyRecord<any, any> | null = null;\n  if (mutation.kind === 'html') {\n    record = getElementHTMLRecord(el);\n  } else if (mutation.kind === 'class') {\n    record = getElementClassRecord(el);\n  } else if (mutation.kind === 'attribute') {\n    record = getElementAttributeRecord(el, mutation.attribute);\n  } else if (mutation.kind === 'position') {\n    record = getElementPositionRecord(el);\n  }\n  if (!record) return;\n  const index = record.mutations.indexOf(mutation);\n  if (index !== -1) record.mutations.splice(index, 1);\n  record.mutationRunner(record);\n}\n\n// maintain list of elements associated with mutation\nfunction refreshElementsSet(mutation: Mutation) {\n  // if a position mutation has already found an element to move, don't move\n  // any more elements\n  if (mutation.kind === 'position' && mutation.elements.size === 1) return;\n\n  const existingElements = new Set(mutation.elements);\n  const matchingElements = document.querySelectorAll(mutation.selector);\n  matchingElements.forEach(el => {\n    if (!existingElements.has(el)) {\n      mutation.elements.add(el);\n      startMutating(mutation, el);\n    }\n  });\n}\n\nfunction revertMutation(mutation: Mutation) {\n  mutation.elements.forEach(el => stopMutating(mutation, el));\n  mutation.elements.clear();\n  mutations.delete(mutation);\n}\n\nfunction refreshAllElementSets() {\n  mutations.forEach(refreshElementsSet);\n}\n\n// pause/resume global observer\nlet paused: boolean = false;\nexport function pauseGlobalObserver() {\n  paused = true;\n}\nexport function isGlobalObserverPaused() {\n  return paused;\n}\nexport function resumeGlobalObserver() {\n  paused = false;\n  refreshAllElementSets();\n}\n\n// Observer for elements that don't exist in the DOM yet\nlet observer: MutationObserver;\n\nexport function disconnectGlobalObserver() {\n  observer && observer.disconnect();\n}\nexport function connectGlobalObserver() {\n  if (typeof document === 'undefined') return;\n  if (!observer) {\n    observer = new MutationObserver(() => {\n      refreshAllElementSets();\n    });\n  }\n  refreshAllElementSets();\n  observer.observe(document.documentElement, {\n    childList: true,\n    subtree: true,\n    attributes: false,\n    characterData: false,\n  });\n}\n// run on init\nconnectGlobalObserver();\n\nexport const getHtmlMutationRecordsFromSelector = (selector: string) => {\n  const elements = document.querySelectorAll(selector);\n  const records: HTMLRecord[] = [];\n  elements.forEach(el => {\n    const record = getElementHTMLRecord(el);\n    if (record) records.push(record);\n  });\n  return records;\n};\n\nfunction newMutation(m: Mutation): MutationController {\n  // Not in a browser\n  if (typeof document === 'undefined') return nullController;\n  // add to global index of mutations\n  mutations.add(m);\n  // run refresh on init to establish list of elements associated w/ mutation\n  refreshElementsSet(m);\n  return {\n    revert: () => {\n      revertMutation(m);\n    },\n  };\n}\n\nfunction html(\n  selector: HTMLMutation['selector'],\n  mutate: HTMLMutation['mutate']\n) {\n  return newMutation({\n    kind: 'html',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction position(\n  selector: PositionMutation['selector'],\n  mutate: PositionMutation['mutate']\n) {\n  return newMutation({\n    kind: 'position',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction classes(\n  selector: ClassnameMutation['selector'],\n  mutate: ClassnameMutation['mutate']\n) {\n  return newMutation({\n    kind: 'class',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction attribute(\n  selector: AttrMutation['selector'],\n  attribute: AttrMutation['attribute'],\n  mutate: AttrMutation['mutate']\n) {\n  if (!validAttributeName.test(attribute)) return nullController;\n\n  if (attribute === 'class' || attribute === 'className') {\n    return classes(selector, classnames => {\n      const mutatedClassnames = mutate(Array.from(classnames).join(' '));\n      classnames.clear();\n      if (!mutatedClassnames) return;\n      mutatedClassnames\n        .split(/\\s+/g)\n        .filter(Boolean)\n        .forEach(c => classnames.add(c));\n    });\n  }\n\n  return newMutation({\n    kind: 'attribute',\n    attribute,\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction declarative({\n  selector,\n  action,\n  value,\n  attribute: attr,\n  parentSelector,\n  insertBeforeSelector,\n}: DeclarativeMutation): MutationController {\n  if (attr === 'html') {\n    if (action === 'append') {\n      return html(selector, val => val + (value ?? ''));\n    } else if (action === 'set') {\n      return html(selector, () => value ?? '');\n    }\n  } else if (attr === 'class') {\n    if (action === 'append') {\n      return classes(selector, val => {\n        if (value) val.add(value);\n      });\n    } else if (action === 'remove') {\n      return classes(selector, val => {\n        if (value) val.delete(value);\n      });\n    } else if (action === 'set') {\n      return classes(selector, val => {\n        val.clear();\n        if (value) val.add(value);\n      });\n    }\n  } else if (attr === 'position') {\n    if (action === 'set' && parentSelector) {\n      return position(selector, () => ({\n        insertBeforeSelector,\n        parentSelector,\n      }));\n    }\n  } else {\n    if (action === 'append') {\n      return attribute(selector, attr, val =>\n        val !== null ? val + (value ?? '') : value ?? ''\n      );\n    } else if (action === 'set') {\n      return attribute(selector, attr, () => value ?? '');\n    } else if (action === 'remove') {\n      return attribute(selector, attr, () => null);\n    }\n  }\n  return nullController;\n}\n\nexport type MutationController = {\n  revert: () => void;\n};\n\nexport type DeclarativeMutation = {\n  selector: string;\n  attribute: string;\n  action: 'append' | 'set' | 'remove';\n  value?: string;\n  parentSelector?: string;\n  insertBeforeSelector?: string;\n};\n\nexport default {\n  html,\n  classes,\n  attribute,\n  position,\n  declarative,\n};\n"],"names":["validAttributeName","nullController","revert","elements","Map","mutations","Set","getElementRecord","element","record","get","set","attributes","createElementPropertyRecord","el","attr","getCurrentValue","setValue","mutationRunner","currentValue","isDirty","originalValue","virtualValue","_positionTimeout","observer","MutationObserver","paused","setTimeout","parentNode","insertBeforeNode","observe","childList","subtree","characterData","attributeFilter","getObserverInit","queueIfNeeded","val","currentVal","runDOMUpdates","htmlMutationRunner","forEach","m","mutate","html","transformContainer","document","createElement","innerHTML","getTransformedHTML","classMutationRunner","split","filter","Boolean","Array","from","join","attrMutationRunner","positionMutationRunner","newNodes","insertBeforeSelector","querySelector","parentSelector","_loadDOMNodes","getHTMLValue","setHTMLValue","value","getElementHTMLRecord","elementRecord","getElementPosition","parentElement","nextElementSibling","setElementPosition","contains","insertBefore","getElementPositionRecord","position","setClassValue","className","removeAttribute","getClassValue","getElementClassRecord","classes","getElementAttributeRecord","attrName","getAttribute","setAttribute","setAttrValue","setPropertyValue","length","disconnect","deleteElementPropertyRecord","Object","keys","refreshElementsSet","mutation","kind","size","existingElements","querySelectorAll","selector","has","add","attribute","push","startMutating","refreshAllElementSets","connectGlobalObserver","documentElement","newMutation","index","indexOf","splice","stopMutating","clear","test","classnames","mutatedClassnames","c","declarative","action","records"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"dom-mutator.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["export const validAttributeName = /^[a-zA-Z:_][a-zA-Z0-9:_.-]*$/;\nconst nullController: MutationController = {\n  revert: () => {},\n};\n\nconst elements: Map<Element, ElementRecord> = new Map();\nconst mutations: Set<Mutation> = new Set();\n\nfunction getObserverInit(attr: string): MutationObserverInit {\n  return attr === 'html'\n    ? {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        characterData: true,\n      }\n    : {\n        childList: false,\n        subtree: false,\n        attributes: true,\n        attributeFilter: [attr],\n      };\n}\n\nfunction getElementRecord(element: Element): ElementRecord {\n  let record = elements.get(element);\n\n  if (!record) {\n    record = { element, attributes: {} };\n    elements.set(element, record);\n  }\n\n  return record;\n}\nfunction createElementPropertyRecord(\n  el: Element,\n  attr: string,\n  getCurrentValue: (el: Element) => any,\n  setValue: (el: Element, val: any) => void,\n  mutationRunner: (record: ElementPropertyRecord<any, any>) => void\n) {\n  const currentValue = getCurrentValue(el);\n  const record: ElementPropertyRecord<any, any> = {\n    isDirty: false,\n    originalValue: currentValue,\n    virtualValue: currentValue,\n    mutations: [],\n    el,\n    _positionTimeout: null,\n    _textTimeout: null,\n    observer: new MutationObserver(() => {\n      // enact a 1 second timeout that blocks subsequent firing of the\n      // observer until the timeout is complete. This will prevent multiple\n      // mutations from firing in quick succession, which can cause the\n      // mutation to be reverted before the DOM has a chance to update.\n      if (paused) return;\n      if (attr === 'position' && record._positionTimeout) return;\n      if (attr === 'html' && record._textTimeout) return;\n      else if (attr === 'position')\n        record._positionTimeout = setTimeout(() => {\n          record._positionTimeout = null;\n        }, 1000);\n      else if (attr === 'html')\n        record._textTimeout = setTimeout(() => {\n          record._textTimeout = null;\n        }, 1000);\n\n      const currentValue = getCurrentValue(el);\n      if (\n        attr === 'position' &&\n        currentValue.parentNode === record.virtualValue.parentNode &&\n        currentValue.insertBeforeNode === record.virtualValue.insertBeforeNode\n      )\n        return;\n      if (currentValue === record.virtualValue) return;\n      record.originalValue = currentValue;\n      mutationRunner(record);\n    }),\n    mutationRunner,\n    setValue,\n    getCurrentValue,\n  };\n  if (attr === 'position' && el.parentNode) {\n    record.observer.observe(el.parentNode, {\n      childList: true,\n      subtree: true,\n      attributes: false,\n      characterData: false,\n    });\n  } else {\n    record.observer.observe(el, getObserverInit(attr));\n  }\n  return record;\n}\n\nfunction queueIfNeeded(\n  val: string | null | ElementPositionWithDomNode,\n  record: ElementPropertyRecord<any, any>\n) {\n  const currentVal = record.getCurrentValue(record.el);\n  record.virtualValue = val;\n  if (val && typeof val !== 'string') {\n    if (\n      !currentVal ||\n      val.parentNode !== currentVal.parentNode ||\n      val.insertBeforeNode !== currentVal.insertBeforeNode\n    ) {\n      record.isDirty = true;\n      runDOMUpdates();\n    }\n  } else if (val !== currentVal) {\n    record.isDirty = true;\n    runDOMUpdates();\n  }\n}\n\nfunction htmlMutationRunner(record: HTMLRecord) {\n  let val = record.originalValue;\n  record.mutations.forEach(m => (val = m.mutate(val)));\n  queueIfNeeded(getTransformedHTML(val), record);\n}\nfunction classMutationRunner(record: ClassnameRecord) {\n  const val = new Set(record.originalValue.split(/\\s+/).filter(Boolean));\n  record.mutations.forEach(m => m.mutate(val));\n  queueIfNeeded(\n    Array.from(val)\n      .filter(Boolean)\n      .join(' '),\n    record\n  );\n}\n\nfunction attrMutationRunner(record: AttributeRecord) {\n  let val: string | null = record.originalValue;\n  record.mutations.forEach(m => (val = m.mutate(val)));\n  queueIfNeeded(val, record);\n}\n\nfunction _loadDOMNodes({\n  parentSelector,\n  insertBeforeSelector,\n}: ElementPosition): ElementPositionWithDomNode | null {\n  const parentNode = document.querySelector<HTMLElement>(parentSelector);\n  if (!parentNode) return null;\n  const insertBeforeNode = insertBeforeSelector\n    ? document.querySelector<HTMLElement>(insertBeforeSelector)\n    : null;\n  if (insertBeforeSelector && !insertBeforeNode) return null;\n  return {\n    parentNode,\n    insertBeforeNode,\n  };\n}\n\nfunction positionMutationRunner(record: PositionRecord) {\n  let val = record.originalValue;\n  record.mutations.forEach(m => {\n    const selectors = m.mutate();\n    const newNodes = _loadDOMNodes(selectors);\n    val = newNodes || val;\n  });\n  queueIfNeeded(val, record);\n}\n\nconst getHTMLValue = (el: Element) => el.innerHTML;\nconst setHTMLValue = (el: Element, value: string) => (el.innerHTML = value);\nfunction getElementHTMLRecord(element: Element): HTMLRecord {\n  const elementRecord = getElementRecord(element);\n  if (!elementRecord.html) {\n    elementRecord.html = createElementPropertyRecord(\n      element,\n      'html',\n      getHTMLValue,\n      setHTMLValue,\n      htmlMutationRunner\n    );\n  }\n  return elementRecord.html;\n}\n\nconst getElementPosition = (el: Element): ElementPositionWithDomNode => {\n  return {\n    parentNode: el.parentElement as HTMLElement,\n    insertBeforeNode: el.nextElementSibling as HTMLElement | null,\n  };\n};\nconst setElementPosition = (el: Element, value: ElementPositionWithDomNode) => {\n  if (\n    value.insertBeforeNode &&\n    !value.parentNode.contains(value.insertBeforeNode)\n  ) {\n    // skip position mutation - insertBeforeNode not a child of parent. happens\n    // when mutation observer for indvidual element fires out of order\n    return;\n  }\n  value.parentNode.insertBefore(el, value.insertBeforeNode);\n};\nfunction getElementPositionRecord(element: Element): PositionRecord {\n  const elementRecord = getElementRecord(element);\n  if (!elementRecord.position) {\n    elementRecord.position = createElementPropertyRecord(\n      element,\n      'position',\n      getElementPosition,\n      setElementPosition,\n      positionMutationRunner\n    );\n  }\n  return elementRecord.position;\n}\n\nconst setClassValue = (el: Element, val: string) =>\n  val ? (el.className = val) : el.removeAttribute('class');\nconst getClassValue = (el: Element) => el.className;\nfunction getElementClassRecord(el: Element): ClassnameRecord {\n  const elementRecord = getElementRecord(el);\n  if (!elementRecord.classes) {\n    elementRecord.classes = createElementPropertyRecord(\n      el,\n      'class',\n      getClassValue,\n      setClassValue,\n      classMutationRunner\n    );\n  }\n  return elementRecord.classes;\n}\n\nconst getAttrValue = (attrName: string) => (el: Element) =>\n  el.getAttribute(attrName) ?? null;\nconst setAttrValue = (attrName: string) => (el: Element, val: string | null) =>\n  val !== null ? el.setAttribute(attrName, val) : el.removeAttribute(attrName);\nfunction getElementAttributeRecord(el: Element, attr: string): AttributeRecord {\n  const elementRecord = getElementRecord(el);\n  if (!elementRecord.attributes[attr]) {\n    elementRecord.attributes[attr] = createElementPropertyRecord(\n      el,\n      attr,\n      getAttrValue(attr),\n      setAttrValue(attr),\n      attrMutationRunner\n    );\n  }\n  return elementRecord.attributes[attr];\n}\n\nfunction deleteElementPropertyRecord(el: Element, attr: string) {\n  const element = elements.get(el);\n  if (!element) return;\n  if (attr === 'html') {\n    element.html?.observer?.disconnect();\n    delete element.html;\n  } else if (attr === 'class') {\n    element.classes?.observer?.disconnect();\n    delete element.classes;\n  } else if (attr === 'position') {\n    element.position?.observer?.disconnect();\n    delete element.position;\n  } else {\n    element.attributes?.[attr]?.observer?.disconnect();\n    delete element.attributes[attr];\n  }\n}\n\nlet transformContainer: HTMLDivElement;\nfunction getTransformedHTML(html: string) {\n  if (!transformContainer) {\n    transformContainer = document.createElement('div');\n  }\n  transformContainer.innerHTML = html;\n  return transformContainer.innerHTML;\n}\n\nfunction setPropertyValue<T extends ElementPropertyRecord<any, any>>(\n  el: Element,\n  attr: string,\n  m: T\n) {\n  if (!m.isDirty) return;\n  m.isDirty = false;\n  const val = m.virtualValue;\n  if (!m.mutations.length) {\n    deleteElementPropertyRecord(el, attr);\n  }\n  m.setValue(el, val);\n}\n\nfunction setValue(m: ElementRecord, el: Element) {\n  m.html && setPropertyValue<HTMLRecord>(el, 'html', m.html);\n  m.classes && setPropertyValue<ClassnameRecord>(el, 'class', m.classes);\n  m.position && setPropertyValue<PositionRecord>(el, 'position', m.position);\n  Object.keys(m.attributes).forEach(attr => {\n    setPropertyValue<AttributeRecord>(el, attr, m.attributes[attr]);\n  });\n}\n\nfunction runDOMUpdates() {\n  elements.forEach(setValue);\n}\n\n// find or create ElementPropertyRecord, add mutation to it, then run\nfunction startMutating(mutation: Mutation, element: Element) {\n  let record: ElementPropertyRecord<any, any> | null = null;\n  if (mutation.kind === 'html') {\n    record = getElementHTMLRecord(element);\n  } else if (mutation.kind === 'class') {\n    record = getElementClassRecord(element);\n  } else if (mutation.kind === 'attribute') {\n    record = getElementAttributeRecord(element, mutation.attribute);\n  } else if (mutation.kind === 'position') {\n    record = getElementPositionRecord(element);\n  }\n  if (!record) return;\n  record.mutations.push(mutation);\n  record.mutationRunner(record);\n}\n\n// get (existing) ElementPropertyRecord, remove mutation from it, then run\nfunction stopMutating(mutation: Mutation, el: Element) {\n  let record: ElementPropertyRecord<any, any> | null = null;\n  if (mutation.kind === 'html') {\n    record = getElementHTMLRecord(el);\n  } else if (mutation.kind === 'class') {\n    record = getElementClassRecord(el);\n  } else if (mutation.kind === 'attribute') {\n    record = getElementAttributeRecord(el, mutation.attribute);\n  } else if (mutation.kind === 'position') {\n    record = getElementPositionRecord(el);\n  }\n  if (!record) return;\n  const index = record.mutations.indexOf(mutation);\n  if (index !== -1) record.mutations.splice(index, 1);\n  record.mutationRunner(record);\n}\n\n// maintain list of elements associated with mutation\nfunction refreshElementsSet(mutation: Mutation) {\n  // if a position mutation has already found an element to move, don't move\n  // any more elements\n  if (mutation.kind === 'position' && mutation.elements.size === 1) return;\n\n  const existingElements = new Set(mutation.elements);\n  const matchingElements = document.querySelectorAll(mutation.selector);\n  matchingElements.forEach(el => {\n    if (!existingElements.has(el)) {\n      mutation.elements.add(el);\n      startMutating(mutation, el);\n    }\n  });\n}\n\nfunction revertMutation(mutation: Mutation) {\n  mutation.elements.forEach(el => stopMutating(mutation, el));\n  mutation.elements.clear();\n  mutations.delete(mutation);\n}\n\nfunction refreshAllElementSets() {\n  mutations.forEach(refreshElementsSet);\n}\n\n// pause/resume global observer\nlet paused: boolean = false;\nexport function pauseGlobalObserver() {\n  paused = true;\n}\nexport function isGlobalObserverPaused() {\n  return paused;\n}\nexport function resumeGlobalObserver() {\n  paused = false;\n  refreshAllElementSets();\n}\n\n// Observer for elements that don't exist in the DOM yet\nlet observer: MutationObserver;\n\nexport function disconnectGlobalObserver() {\n  observer && observer.disconnect();\n}\nexport function connectGlobalObserver() {\n  if (typeof document === 'undefined') return;\n  if (!observer) {\n    observer = new MutationObserver(() => {\n      refreshAllElementSets();\n    });\n  }\n  refreshAllElementSets();\n  observer.observe(document.documentElement, {\n    childList: true,\n    subtree: true,\n    attributes: false,\n    characterData: false,\n  });\n}\n// run on init\nconnectGlobalObserver();\n\nexport const getHtmlMutationRecordsFromSelector = (selector: string) => {\n  const elements = document.querySelectorAll(selector);\n  const records: HTMLRecord[] = [];\n  elements.forEach(el => {\n    const record = getElementHTMLRecord(el);\n    if (record) records.push(record);\n  });\n  return records;\n};\n\nfunction newMutation(m: Mutation): MutationController {\n  // Not in a browser\n  if (typeof document === 'undefined') return nullController;\n  // add to global index of mutations\n  mutations.add(m);\n  // run refresh on init to establish list of elements associated w/ mutation\n  refreshElementsSet(m);\n  return {\n    revert: () => {\n      revertMutation(m);\n    },\n  };\n}\n\nfunction html(\n  selector: HTMLMutation['selector'],\n  mutate: HTMLMutation['mutate']\n) {\n  return newMutation({\n    kind: 'html',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction position(\n  selector: PositionMutation['selector'],\n  mutate: PositionMutation['mutate']\n) {\n  return newMutation({\n    kind: 'position',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction classes(\n  selector: ClassnameMutation['selector'],\n  mutate: ClassnameMutation['mutate']\n) {\n  return newMutation({\n    kind: 'class',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction attribute(\n  selector: AttrMutation['selector'],\n  attribute: AttrMutation['attribute'],\n  mutate: AttrMutation['mutate']\n) {\n  if (!validAttributeName.test(attribute)) return nullController;\n\n  if (attribute === 'class' || attribute === 'className') {\n    return classes(selector, classnames => {\n      const mutatedClassnames = mutate(Array.from(classnames).join(' '));\n      classnames.clear();\n      if (!mutatedClassnames) return;\n      mutatedClassnames\n        .split(/\\s+/g)\n        .filter(Boolean)\n        .forEach(c => classnames.add(c));\n    });\n  }\n\n  return newMutation({\n    kind: 'attribute',\n    attribute,\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction declarative({\n  selector,\n  action,\n  value,\n  attribute: attr,\n  parentSelector,\n  insertBeforeSelector,\n}: DeclarativeMutation): MutationController {\n  if (attr === 'html') {\n    if (action === 'append') {\n      return html(selector, val => val + (value ?? ''));\n    } else if (action === 'set') {\n      return html(selector, () => value ?? '');\n    }\n  } else if (attr === 'class') {\n    if (action === 'append') {\n      return classes(selector, val => {\n        if (value) val.add(value);\n      });\n    } else if (action === 'remove') {\n      return classes(selector, val => {\n        if (value) val.delete(value);\n      });\n    } else if (action === 'set') {\n      return classes(selector, val => {\n        val.clear();\n        if (value) val.add(value);\n      });\n    }\n  } else if (attr === 'position') {\n    if (action === 'set' && parentSelector) {\n      return position(selector, () => ({\n        insertBeforeSelector,\n        parentSelector,\n      }));\n    }\n  } else {\n    if (action === 'append') {\n      return attribute(selector, attr, val =>\n        val !== null ? val + (value ?? '') : value ?? ''\n      );\n    } else if (action === 'set') {\n      return attribute(selector, attr, () => value ?? '');\n    } else if (action === 'remove') {\n      return attribute(selector, attr, () => null);\n    }\n  }\n  return nullController;\n}\n\nexport type MutationController = {\n  revert: () => void;\n};\n\nexport type DeclarativeMutation = {\n  selector: string;\n  attribute: string;\n  action: 'append' | 'set' | 'remove';\n  value?: string;\n  parentSelector?: string;\n  insertBeforeSelector?: string;\n};\n\nexport default {\n  html,\n  classes,\n  attribute,\n  position,\n  declarative,\n};\n"],"names":["validAttributeName","nullController","revert","elements","Map","mutations","Set","getElementRecord","element","record","get","set","attributes","createElementPropertyRecord","el","attr","getCurrentValue","setValue","mutationRunner","currentValue","isDirty","originalValue","virtualValue","_positionTimeout","_textTimeout","observer","MutationObserver","paused","setTimeout","parentNode","insertBeforeNode","observe","childList","subtree","characterData","attributeFilter","getObserverInit","queueIfNeeded","val","currentVal","runDOMUpdates","htmlMutationRunner","forEach","m","mutate","html","transformContainer","document","createElement","innerHTML","getTransformedHTML","classMutationRunner","split","filter","Boolean","Array","from","join","attrMutationRunner","positionMutationRunner","newNodes","_ref","insertBeforeSelector","querySelector","parentSelector","_loadDOMNodes","getHTMLValue","setHTMLValue","value","getElementHTMLRecord","elementRecord","getElementPosition","parentElement","nextElementSibling","setElementPosition","contains","insertBefore","getElementPositionRecord","position","setClassValue","className","removeAttribute","getClassValue","getElementClassRecord","classes","getElementAttributeRecord","attrName","_el$getAttribute","getAttribute","setAttribute","setAttrValue","setPropertyValue","length","_element$html","disconnect","_element$classes","_element$position","_element$attributes","deleteElementPropertyRecord","Object","keys","refreshElementsSet","mutation","kind","size","existingElements","querySelectorAll","selector","has","add","attribute","push","startMutating","refreshAllElementSets","connectGlobalObserver","documentElement","newMutation","index","indexOf","splice","stopMutating","clear","test","classnames","mutatedClassnames","c","declarative","_ref2","action","records"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/dom-mutator/dist/dom-mutator.esm.js b/node_modules/dom-mutator/dist/dom-mutator.esm.js
index d5296f4..ea4acea 100644
--- a/node_modules/dom-mutator/dist/dom-mutator.esm.js
+++ b/node_modules/dom-mutator/dist/dom-mutator.esm.js
@@ -4,7 +4,6 @@ var nullController = {
 };
 var elements = /*#__PURE__*/new Map();
 var mutations = /*#__PURE__*/new Set();
-
 function getObserverInit(attr) {
   return attr === 'html' ? {
     childList: true,
@@ -18,10 +17,8 @@ function getObserverInit(attr) {
     attributeFilter: [attr]
   };
 }
-
 function getElementRecord(element) {
   var record = elements.get(element);
-
   if (!record) {
     record = {
       element: element,
@@ -29,10 +26,8 @@ function getElementRecord(element) {
     };
     elements.set(element, record);
   }
-
   return record;
 }
-
 function createElementPropertyRecord(el, attr, getCurrentValue, setValue, mutationRunner) {
   var currentValue = getCurrentValue(el);
   var record = {
@@ -42,14 +37,18 @@ function createElementPropertyRecord(el, attr, getCurrentValue, setValue, mutati
     mutations: [],
     el: el,
     _positionTimeout: null,
+    _textTimeout: null,
     observer: new MutationObserver(function () {
       // enact a 1 second timeout that blocks subsequent firing of the
       // observer until the timeout is complete. This will prevent multiple
       // mutations from firing in quick succession, which can cause the
       // mutation to be reverted before the DOM has a chance to update.
       if (paused) return;
-      if (attr === 'position' && record._positionTimeout) return;else if (attr === 'position') record._positionTimeout = setTimeout(function () {
+      if (attr === 'position' && record._positionTimeout) return;
+      if (attr === 'html' && record._textTimeout) return;else if (attr === 'position') record._positionTimeout = setTimeout(function () {
         record._positionTimeout = null;
+      }, 1000);else if (attr === 'html') record._textTimeout = setTimeout(function () {
+        record._textTimeout = null;
       }, 1000);
       var currentValue = getCurrentValue(el);
       if (attr === 'position' && currentValue.parentNode === record.virtualValue.parentNode && currentValue.insertBeforeNode === record.virtualValue.insertBeforeNode) return;
@@ -61,7 +60,6 @@ function createElementPropertyRecord(el, attr, getCurrentValue, setValue, mutati
     setValue: setValue,
     getCurrentValue: getCurrentValue
   };
-
   if (attr === 'position' && el.parentNode) {
     record.observer.observe(el.parentNode, {
       childList: true,
@@ -72,14 +70,11 @@ function createElementPropertyRecord(el, attr, getCurrentValue, setValue, mutati
   } else {
     record.observer.observe(el, getObserverInit(attr));
   }
-
   return record;
 }
-
 function queueIfNeeded(val, record) {
   var currentVal = record.getCurrentValue(record.el);
   record.virtualValue = val;
-
   if (val && typeof val !== 'string') {
     if (!currentVal || val.parentNode !== currentVal.parentNode || val.insertBeforeNode !== currentVal.insertBeforeNode) {
       record.isDirty = true;
@@ -90,7 +85,6 @@ function queueIfNeeded(val, record) {
     runDOMUpdates();
   }
 }
-
 function htmlMutationRunner(record) {
   var val = record.originalValue;
   record.mutations.forEach(function (m) {
@@ -98,7 +92,6 @@ function htmlMutationRunner(record) {
   });
   queueIfNeeded(getTransformedHTML(val), record);
 }
-
 function classMutationRunner(record) {
   var val = new Set(record.originalValue.split(/\s+/).filter(Boolean));
   record.mutations.forEach(function (m) {
@@ -106,7 +99,6 @@ function classMutationRunner(record) {
   });
   queueIfNeeded(Array.from(val).filter(Boolean).join(' '), record);
 }
-
 function attrMutationRunner(record) {
   var val = record.originalValue;
   record.mutations.forEach(function (m) {
@@ -114,10 +106,9 @@ function attrMutationRunner(record) {
   });
   queueIfNeeded(val, record);
 }
-
 function _loadDOMNodes(_ref) {
   var parentSelector = _ref.parentSelector,
-      insertBeforeSelector = _ref.insertBeforeSelector;
+    insertBeforeSelector = _ref.insertBeforeSelector;
   var parentNode = document.querySelector(parentSelector);
   if (!parentNode) return null;
   var insertBeforeNode = insertBeforeSelector ? document.querySelector(insertBeforeSelector) : null;
@@ -127,156 +118,118 @@ function _loadDOMNodes(_ref) {
     insertBeforeNode: insertBeforeNode
   };
 }
-
 function positionMutationRunner(record) {
   var val = record.originalValue;
   record.mutations.forEach(function (m) {
     var selectors = m.mutate();
-
     var newNodes = _loadDOMNodes(selectors);
-
     val = newNodes || val;
   });
   queueIfNeeded(val, record);
 }
-
 var getHTMLValue = function getHTMLValue(el) {
   return el.innerHTML;
 };
-
 var setHTMLValue = function setHTMLValue(el, value) {
   return el.innerHTML = value;
 };
-
 function getElementHTMLRecord(element) {
   var elementRecord = getElementRecord(element);
-
   if (!elementRecord.html) {
     elementRecord.html = createElementPropertyRecord(element, 'html', getHTMLValue, setHTMLValue, htmlMutationRunner);
   }
-
   return elementRecord.html;
 }
-
 var getElementPosition = function getElementPosition(el) {
   return {
     parentNode: el.parentElement,
     insertBeforeNode: el.nextElementSibling
   };
 };
-
 var setElementPosition = function setElementPosition(el, value) {
   if (value.insertBeforeNode && !value.parentNode.contains(value.insertBeforeNode)) {
     // skip position mutation - insertBeforeNode not a child of parent. happens
     // when mutation observer for indvidual element fires out of order
     return;
   }
-
   value.parentNode.insertBefore(el, value.insertBeforeNode);
 };
-
 function getElementPositionRecord(element) {
   var elementRecord = getElementRecord(element);
-
   if (!elementRecord.position) {
     elementRecord.position = createElementPropertyRecord(element, 'position', getElementPosition, setElementPosition, positionMutationRunner);
   }
-
   return elementRecord.position;
 }
-
 var setClassValue = function setClassValue(el, val) {
   return val ? el.className = val : el.removeAttribute('class');
 };
-
 var getClassValue = function getClassValue(el) {
   return el.className;
 };
-
 function getElementClassRecord(el) {
   var elementRecord = getElementRecord(el);
-
   if (!elementRecord.classes) {
     elementRecord.classes = createElementPropertyRecord(el, 'class', getClassValue, setClassValue, classMutationRunner);
   }
-
   return elementRecord.classes;
 }
-
 var getAttrValue = function getAttrValue(attrName) {
   return function (el) {
     var _el$getAttribute;
-
     return (_el$getAttribute = el.getAttribute(attrName)) != null ? _el$getAttribute : null;
   };
 };
-
 var setAttrValue = function setAttrValue(attrName) {
   return function (el, val) {
     return val !== null ? el.setAttribute(attrName, val) : el.removeAttribute(attrName);
   };
 };
-
 function getElementAttributeRecord(el, attr) {
   var elementRecord = getElementRecord(el);
-
   if (!elementRecord.attributes[attr]) {
     elementRecord.attributes[attr] = createElementPropertyRecord(el, attr, getAttrValue(attr), setAttrValue(attr), attrMutationRunner);
   }
-
   return elementRecord.attributes[attr];
 }
-
 function deleteElementPropertyRecord(el, attr) {
   var element = elements.get(el);
   if (!element) return;
-
   if (attr === 'html') {
-    var _element$html, _element$html$observe;
-
-    (_element$html = element.html) == null ? void 0 : (_element$html$observe = _element$html.observer) == null ? void 0 : _element$html$observe.disconnect();
+    var _element$html;
+    (_element$html = element.html) == null || (_element$html = _element$html.observer) == null || _element$html.disconnect();
     delete element.html;
   } else if (attr === 'class') {
-    var _element$classes, _element$classes$obse;
-
-    (_element$classes = element.classes) == null ? void 0 : (_element$classes$obse = _element$classes.observer) == null ? void 0 : _element$classes$obse.disconnect();
+    var _element$classes;
+    (_element$classes = element.classes) == null || (_element$classes = _element$classes.observer) == null || _element$classes.disconnect();
     delete element.classes;
   } else if (attr === 'position') {
-    var _element$position, _element$position$obs;
-
-    (_element$position = element.position) == null ? void 0 : (_element$position$obs = _element$position.observer) == null ? void 0 : _element$position$obs.disconnect();
+    var _element$position;
+    (_element$position = element.position) == null || (_element$position = _element$position.observer) == null || _element$position.disconnect();
     delete element.position;
   } else {
-    var _element$attributes, _element$attributes$a, _element$attributes$a2;
-
-    (_element$attributes = element.attributes) == null ? void 0 : (_element$attributes$a = _element$attributes[attr]) == null ? void 0 : (_element$attributes$a2 = _element$attributes$a.observer) == null ? void 0 : _element$attributes$a2.disconnect();
+    var _element$attributes;
+    (_element$attributes = element.attributes) == null || (_element$attributes = _element$attributes[attr]) == null || (_element$attributes = _element$attributes.observer) == null || _element$attributes.disconnect();
     delete element.attributes[attr];
   }
 }
-
 var transformContainer;
-
 function getTransformedHTML(html) {
   if (!transformContainer) {
     transformContainer = document.createElement('div');
   }
-
   transformContainer.innerHTML = html;
   return transformContainer.innerHTML;
 }
-
 function setPropertyValue(el, attr, m) {
   if (!m.isDirty) return;
   m.isDirty = false;
   var val = m.virtualValue;
-
   if (!m.mutations.length) {
     deleteElementPropertyRecord(el, attr);
   }
-
   m.setValue(el, val);
 }
-
 function setValue(m, el) {
   m.html && setPropertyValue(el, 'html', m.html);
   m.classes && setPropertyValue(el, 'class', m.classes);
@@ -285,15 +238,12 @@ function setValue(m, el) {
     setPropertyValue(el, attr, m.attributes[attr]);
   });
 }
-
 function runDOMUpdates() {
   elements.forEach(setValue);
-} // find or create ElementPropertyRecord, add mutation to it, then run
-
-
+}
+// find or create ElementPropertyRecord, add mutation to it, then run
 function startMutating(mutation, element) {
   var record = null;
-
   if (mutation.kind === 'html') {
     record = getElementHTMLRecord(element);
   } else if (mutation.kind === 'class') {
@@ -303,16 +253,13 @@ function startMutating(mutation, element) {
   } else if (mutation.kind === 'position') {
     record = getElementPositionRecord(element);
   }
-
   if (!record) return;
   record.mutations.push(mutation);
   record.mutationRunner(record);
-} // get (existing) ElementPropertyRecord, remove mutation from it, then run
-
-
+}
+// get (existing) ElementPropertyRecord, remove mutation from it, then run
 function stopMutating(mutation, el) {
   var record = null;
-
   if (mutation.kind === 'html') {
     record = getElementHTMLRecord(el);
   } else if (mutation.kind === 'class') {
@@ -322,14 +269,12 @@ function stopMutating(mutation, el) {
   } else if (mutation.kind === 'position') {
     record = getElementPositionRecord(el);
   }
-
   if (!record) return;
   var index = record.mutations.indexOf(mutation);
   if (index !== -1) record.mutations.splice(index, 1);
   record.mutationRunner(record);
-} // maintain list of elements associated with mutation
-
-
+}
+// maintain list of elements associated with mutation
 function refreshElementsSet(mutation) {
   // if a position mutation has already found an element to move, don't move
   // any more elements
@@ -343,7 +288,6 @@ function refreshElementsSet(mutation) {
     }
   });
 }
-
 function revertMutation(mutation) {
   mutation.elements.forEach(function (el) {
     return stopMutating(mutation, el);
@@ -351,12 +295,10 @@ function revertMutation(mutation) {
   mutation.elements.clear();
   mutations["delete"](mutation);
 }
-
 function refreshAllElementSets() {
   mutations.forEach(refreshElementsSet);
-} // pause/resume global observer
-
-
+}
+// pause/resume global observer
 var paused = false;
 function pauseGlobalObserver() {
   paused = true;
@@ -367,21 +309,19 @@ function isGlobalObserverPaused() {
 function resumeGlobalObserver() {
   paused = false;
   refreshAllElementSets();
-} // Observer for elements that don't exist in the DOM yet
-
+}
+// Observer for elements that don't exist in the DOM yet
 var observer;
 function disconnectGlobalObserver() {
   observer && observer.disconnect();
 }
 function connectGlobalObserver() {
   if (typeof document === 'undefined') return;
-
   if (!observer) {
     observer = new MutationObserver(function () {
       refreshAllElementSets();
     });
   }
-
   refreshAllElementSets();
   observer.observe(document.documentElement, {
     childList: true,
@@ -389,8 +329,8 @@ function connectGlobalObserver() {
     attributes: false,
     characterData: false
   });
-} // run on init
-
+}
+// run on init
 connectGlobalObserver();
 var getHtmlMutationRecordsFromSelector = function getHtmlMutationRecordsFromSelector(selector) {
   var elements = document.querySelectorAll(selector);
@@ -401,13 +341,12 @@ var getHtmlMutationRecordsFromSelector = function getHtmlMutationRecordsFromSele
   });
   return records;
 };
-
 function newMutation(m) {
   // Not in a browser
-  if (typeof document === 'undefined') return nullController; // add to global index of mutations
-
-  mutations.add(m); // run refresh on init to establish list of elements associated w/ mutation
-
+  if (typeof document === 'undefined') return nullController;
+  // add to global index of mutations
+  mutations.add(m);
+  // run refresh on init to establish list of elements associated w/ mutation
   refreshElementsSet(m);
   return {
     revert: function revert() {
@@ -415,7 +354,6 @@ function newMutation(m) {
     }
   };
 }
-
 function html(selector, mutate) {
   return newMutation({
     kind: 'html',
@@ -424,7 +362,6 @@ function html(selector, mutate) {
     selector: selector
   });
 }
-
 function position(selector, mutate) {
   return newMutation({
     kind: 'position',
@@ -433,7 +370,6 @@ function position(selector, mutate) {
     selector: selector
   });
 }
-
 function classes(selector, mutate) {
   return newMutation({
     kind: 'class',
@@ -442,10 +378,8 @@ function classes(selector, mutate) {
     selector: selector
   });
 }
-
 function attribute(selector, attribute, mutate) {
   if (!validAttributeName.test(attribute)) return nullController;
-
   if (attribute === 'class' || attribute === 'className') {
     return classes(selector, function (classnames) {
       var mutatedClassnames = mutate(Array.from(classnames).join(' '));
@@ -456,7 +390,6 @@ function attribute(selector, attribute, mutate) {
       });
     });
   }
-
   return newMutation({
     kind: 'attribute',
     attribute: attribute,
@@ -465,15 +398,13 @@ function attribute(selector, attribute, mutate) {
     selector: selector
   });
 }
-
 function declarative(_ref2) {
   var selector = _ref2.selector,
-      action = _ref2.action,
-      value = _ref2.value,
-      attr = _ref2.attribute,
-      parentSelector = _ref2.parentSelector,
-      insertBeforeSelector = _ref2.insertBeforeSelector;
-
+    action = _ref2.action,
+    value = _ref2.value,
+    attr = _ref2.attribute,
+    parentSelector = _ref2.parentSelector,
+    insertBeforeSelector = _ref2.insertBeforeSelector;
   if (attr === 'html') {
     if (action === 'append') {
       return html(selector, function (val) {
@@ -523,10 +454,8 @@ function declarative(_ref2) {
       });
     }
   }
-
   return nullController;
 }
-
 var index = {
   html: html,
   classes: classes,
diff --git a/node_modules/dom-mutator/dist/dom-mutator.esm.js.map b/node_modules/dom-mutator/dist/dom-mutator.esm.js.map
index 0916346..96eb05a 100644
--- a/node_modules/dom-mutator/dist/dom-mutator.esm.js.map
+++ b/node_modules/dom-mutator/dist/dom-mutator.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"dom-mutator.esm.js","sources":["../src/index.ts"],"sourcesContent":["export const validAttributeName = /^[a-zA-Z:_][a-zA-Z0-9:_.-]*$/;\nconst nullController: MutationController = {\n  revert: () => {},\n};\n\nconst elements: Map<Element, ElementRecord> = new Map();\nconst mutations: Set<Mutation> = new Set();\n\nfunction getObserverInit(attr: string): MutationObserverInit {\n  return attr === 'html'\n    ? {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        characterData: true,\n      }\n    : {\n        childList: false,\n        subtree: false,\n        attributes: true,\n        attributeFilter: [attr],\n      };\n}\n\nfunction getElementRecord(element: Element): ElementRecord {\n  let record = elements.get(element);\n\n  if (!record) {\n    record = { element, attributes: {} };\n    elements.set(element, record);\n  }\n\n  return record;\n}\nfunction createElementPropertyRecord(\n  el: Element,\n  attr: string,\n  getCurrentValue: (el: Element) => any,\n  setValue: (el: Element, val: any) => void,\n  mutationRunner: (record: ElementPropertyRecord<any, any>) => void\n) {\n  const currentValue = getCurrentValue(el);\n  const record: ElementPropertyRecord<any, any> = {\n    isDirty: false,\n    originalValue: currentValue,\n    virtualValue: currentValue,\n    mutations: [],\n    el,\n    _positionTimeout: null,\n    observer: new MutationObserver(() => {\n      // enact a 1 second timeout that blocks subsequent firing of the\n      // observer until the timeout is complete. This will prevent multiple\n      // mutations from firing in quick succession, which can cause the\n      // mutation to be reverted before the DOM has a chance to update.\n      if (paused) return;\n      if (attr === 'position' && record._positionTimeout) return;\n      else if (attr === 'position')\n        record._positionTimeout = setTimeout(() => {\n          record._positionTimeout = null;\n        }, 1000);\n\n      const currentValue = getCurrentValue(el);\n      if (\n        attr === 'position' &&\n        currentValue.parentNode === record.virtualValue.parentNode &&\n        currentValue.insertBeforeNode === record.virtualValue.insertBeforeNode\n      )\n        return;\n      if (currentValue === record.virtualValue) return;\n      record.originalValue = currentValue;\n      mutationRunner(record);\n    }),\n    mutationRunner,\n    setValue,\n    getCurrentValue,\n  };\n  if (attr === 'position' && el.parentNode) {\n    record.observer.observe(el.parentNode, {\n      childList: true,\n      subtree: true,\n      attributes: false,\n      characterData: false,\n    });\n  } else {\n    record.observer.observe(el, getObserverInit(attr));\n  }\n  return record;\n}\n\nfunction queueIfNeeded(\n  val: string | null | ElementPositionWithDomNode,\n  record: ElementPropertyRecord<any, any>\n) {\n  const currentVal = record.getCurrentValue(record.el);\n  record.virtualValue = val;\n  if (val && typeof val !== 'string') {\n    if (\n      !currentVal ||\n      val.parentNode !== currentVal.parentNode ||\n      val.insertBeforeNode !== currentVal.insertBeforeNode\n    ) {\n      record.isDirty = true;\n      runDOMUpdates();\n    }\n  } else if (val !== currentVal) {\n    record.isDirty = true;\n    runDOMUpdates();\n  }\n}\n\nfunction htmlMutationRunner(record: HTMLRecord) {\n  let val = record.originalValue;\n  record.mutations.forEach(m => (val = m.mutate(val)));\n  queueIfNeeded(getTransformedHTML(val), record);\n}\nfunction classMutationRunner(record: ClassnameRecord) {\n  const val = new Set(record.originalValue.split(/\\s+/).filter(Boolean));\n  record.mutations.forEach(m => m.mutate(val));\n  queueIfNeeded(\n    Array.from(val)\n      .filter(Boolean)\n      .join(' '),\n    record\n  );\n}\n\nfunction attrMutationRunner(record: AttributeRecord) {\n  let val: string | null = record.originalValue;\n  record.mutations.forEach(m => (val = m.mutate(val)));\n  queueIfNeeded(val, record);\n}\n\nfunction _loadDOMNodes({\n  parentSelector,\n  insertBeforeSelector,\n}: ElementPosition): ElementPositionWithDomNode | null {\n  const parentNode = document.querySelector<HTMLElement>(parentSelector);\n  if (!parentNode) return null;\n  const insertBeforeNode = insertBeforeSelector\n    ? document.querySelector<HTMLElement>(insertBeforeSelector)\n    : null;\n  if (insertBeforeSelector && !insertBeforeNode) return null;\n  return {\n    parentNode,\n    insertBeforeNode,\n  };\n}\n\nfunction positionMutationRunner(record: PositionRecord) {\n  let val = record.originalValue;\n  record.mutations.forEach(m => {\n    const selectors = m.mutate();\n    const newNodes = _loadDOMNodes(selectors);\n    val = newNodes || val;\n  });\n  queueIfNeeded(val, record);\n}\n\nconst getHTMLValue = (el: Element) => el.innerHTML;\nconst setHTMLValue = (el: Element, value: string) => (el.innerHTML = value);\nfunction getElementHTMLRecord(element: Element): HTMLRecord {\n  const elementRecord = getElementRecord(element);\n  if (!elementRecord.html) {\n    elementRecord.html = createElementPropertyRecord(\n      element,\n      'html',\n      getHTMLValue,\n      setHTMLValue,\n      htmlMutationRunner\n    );\n  }\n  return elementRecord.html;\n}\n\nconst getElementPosition = (el: Element): ElementPositionWithDomNode => {\n  return {\n    parentNode: el.parentElement as HTMLElement,\n    insertBeforeNode: el.nextElementSibling as HTMLElement | null,\n  };\n};\nconst setElementPosition = (el: Element, value: ElementPositionWithDomNode) => {\n  if (\n    value.insertBeforeNode &&\n    !value.parentNode.contains(value.insertBeforeNode)\n  ) {\n    // skip position mutation - insertBeforeNode not a child of parent. happens\n    // when mutation observer for indvidual element fires out of order\n    return;\n  }\n  value.parentNode.insertBefore(el, value.insertBeforeNode);\n};\nfunction getElementPositionRecord(element: Element): PositionRecord {\n  const elementRecord = getElementRecord(element);\n  if (!elementRecord.position) {\n    elementRecord.position = createElementPropertyRecord(\n      element,\n      'position',\n      getElementPosition,\n      setElementPosition,\n      positionMutationRunner\n    );\n  }\n  return elementRecord.position;\n}\n\nconst setClassValue = (el: Element, val: string) =>\n  val ? (el.className = val) : el.removeAttribute('class');\nconst getClassValue = (el: Element) => el.className;\nfunction getElementClassRecord(el: Element): ClassnameRecord {\n  const elementRecord = getElementRecord(el);\n  if (!elementRecord.classes) {\n    elementRecord.classes = createElementPropertyRecord(\n      el,\n      'class',\n      getClassValue,\n      setClassValue,\n      classMutationRunner\n    );\n  }\n  return elementRecord.classes;\n}\n\nconst getAttrValue = (attrName: string) => (el: Element) =>\n  el.getAttribute(attrName) ?? null;\nconst setAttrValue = (attrName: string) => (el: Element, val: string | null) =>\n  val !== null ? el.setAttribute(attrName, val) : el.removeAttribute(attrName);\nfunction getElementAttributeRecord(el: Element, attr: string): AttributeRecord {\n  const elementRecord = getElementRecord(el);\n  if (!elementRecord.attributes[attr]) {\n    elementRecord.attributes[attr] = createElementPropertyRecord(\n      el,\n      attr,\n      getAttrValue(attr),\n      setAttrValue(attr),\n      attrMutationRunner\n    );\n  }\n  return elementRecord.attributes[attr];\n}\n\nfunction deleteElementPropertyRecord(el: Element, attr: string) {\n  const element = elements.get(el);\n  if (!element) return;\n  if (attr === 'html') {\n    element.html?.observer?.disconnect();\n    delete element.html;\n  } else if (attr === 'class') {\n    element.classes?.observer?.disconnect();\n    delete element.classes;\n  } else if (attr === 'position') {\n    element.position?.observer?.disconnect();\n    delete element.position;\n  } else {\n    element.attributes?.[attr]?.observer?.disconnect();\n    delete element.attributes[attr];\n  }\n}\n\nlet transformContainer: HTMLDivElement;\nfunction getTransformedHTML(html: string) {\n  if (!transformContainer) {\n    transformContainer = document.createElement('div');\n  }\n  transformContainer.innerHTML = html;\n  return transformContainer.innerHTML;\n}\n\nfunction setPropertyValue<T extends ElementPropertyRecord<any, any>>(\n  el: Element,\n  attr: string,\n  m: T\n) {\n  if (!m.isDirty) return;\n  m.isDirty = false;\n  const val = m.virtualValue;\n  if (!m.mutations.length) {\n    deleteElementPropertyRecord(el, attr);\n  }\n  m.setValue(el, val);\n}\n\nfunction setValue(m: ElementRecord, el: Element) {\n  m.html && setPropertyValue<HTMLRecord>(el, 'html', m.html);\n  m.classes && setPropertyValue<ClassnameRecord>(el, 'class', m.classes);\n  m.position && setPropertyValue<PositionRecord>(el, 'position', m.position);\n  Object.keys(m.attributes).forEach(attr => {\n    setPropertyValue<AttributeRecord>(el, attr, m.attributes[attr]);\n  });\n}\n\nfunction runDOMUpdates() {\n  elements.forEach(setValue);\n}\n\n// find or create ElementPropertyRecord, add mutation to it, then run\nfunction startMutating(mutation: Mutation, element: Element) {\n  let record: ElementPropertyRecord<any, any> | null = null;\n  if (mutation.kind === 'html') {\n    record = getElementHTMLRecord(element);\n  } else if (mutation.kind === 'class') {\n    record = getElementClassRecord(element);\n  } else if (mutation.kind === 'attribute') {\n    record = getElementAttributeRecord(element, mutation.attribute);\n  } else if (mutation.kind === 'position') {\n    record = getElementPositionRecord(element);\n  }\n  if (!record) return;\n  record.mutations.push(mutation);\n  record.mutationRunner(record);\n}\n\n// get (existing) ElementPropertyRecord, remove mutation from it, then run\nfunction stopMutating(mutation: Mutation, el: Element) {\n  let record: ElementPropertyRecord<any, any> | null = null;\n  if (mutation.kind === 'html') {\n    record = getElementHTMLRecord(el);\n  } else if (mutation.kind === 'class') {\n    record = getElementClassRecord(el);\n  } else if (mutation.kind === 'attribute') {\n    record = getElementAttributeRecord(el, mutation.attribute);\n  } else if (mutation.kind === 'position') {\n    record = getElementPositionRecord(el);\n  }\n  if (!record) return;\n  const index = record.mutations.indexOf(mutation);\n  if (index !== -1) record.mutations.splice(index, 1);\n  record.mutationRunner(record);\n}\n\n// maintain list of elements associated with mutation\nfunction refreshElementsSet(mutation: Mutation) {\n  // if a position mutation has already found an element to move, don't move\n  // any more elements\n  if (mutation.kind === 'position' && mutation.elements.size === 1) return;\n\n  const existingElements = new Set(mutation.elements);\n  const matchingElements = document.querySelectorAll(mutation.selector);\n  matchingElements.forEach(el => {\n    if (!existingElements.has(el)) {\n      mutation.elements.add(el);\n      startMutating(mutation, el);\n    }\n  });\n}\n\nfunction revertMutation(mutation: Mutation) {\n  mutation.elements.forEach(el => stopMutating(mutation, el));\n  mutation.elements.clear();\n  mutations.delete(mutation);\n}\n\nfunction refreshAllElementSets() {\n  mutations.forEach(refreshElementsSet);\n}\n\n// pause/resume global observer\nlet paused: boolean = false;\nexport function pauseGlobalObserver() {\n  paused = true;\n}\nexport function isGlobalObserverPaused() {\n  return paused;\n}\nexport function resumeGlobalObserver() {\n  paused = false;\n  refreshAllElementSets();\n}\n\n// Observer for elements that don't exist in the DOM yet\nlet observer: MutationObserver;\n\nexport function disconnectGlobalObserver() {\n  observer && observer.disconnect();\n}\nexport function connectGlobalObserver() {\n  if (typeof document === 'undefined') return;\n  if (!observer) {\n    observer = new MutationObserver(() => {\n      refreshAllElementSets();\n    });\n  }\n  refreshAllElementSets();\n  observer.observe(document.documentElement, {\n    childList: true,\n    subtree: true,\n    attributes: false,\n    characterData: false,\n  });\n}\n// run on init\nconnectGlobalObserver();\n\nexport const getHtmlMutationRecordsFromSelector = (selector: string) => {\n  const elements = document.querySelectorAll(selector);\n  const records: HTMLRecord[] = [];\n  elements.forEach(el => {\n    const record = getElementHTMLRecord(el);\n    if (record) records.push(record);\n  });\n  return records;\n};\n\nfunction newMutation(m: Mutation): MutationController {\n  // Not in a browser\n  if (typeof document === 'undefined') return nullController;\n  // add to global index of mutations\n  mutations.add(m);\n  // run refresh on init to establish list of elements associated w/ mutation\n  refreshElementsSet(m);\n  return {\n    revert: () => {\n      revertMutation(m);\n    },\n  };\n}\n\nfunction html(\n  selector: HTMLMutation['selector'],\n  mutate: HTMLMutation['mutate']\n) {\n  return newMutation({\n    kind: 'html',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction position(\n  selector: PositionMutation['selector'],\n  mutate: PositionMutation['mutate']\n) {\n  return newMutation({\n    kind: 'position',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction classes(\n  selector: ClassnameMutation['selector'],\n  mutate: ClassnameMutation['mutate']\n) {\n  return newMutation({\n    kind: 'class',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction attribute(\n  selector: AttrMutation['selector'],\n  attribute: AttrMutation['attribute'],\n  mutate: AttrMutation['mutate']\n) {\n  if (!validAttributeName.test(attribute)) return nullController;\n\n  if (attribute === 'class' || attribute === 'className') {\n    return classes(selector, classnames => {\n      const mutatedClassnames = mutate(Array.from(classnames).join(' '));\n      classnames.clear();\n      if (!mutatedClassnames) return;\n      mutatedClassnames\n        .split(/\\s+/g)\n        .filter(Boolean)\n        .forEach(c => classnames.add(c));\n    });\n  }\n\n  return newMutation({\n    kind: 'attribute',\n    attribute,\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction declarative({\n  selector,\n  action,\n  value,\n  attribute: attr,\n  parentSelector,\n  insertBeforeSelector,\n}: DeclarativeMutation): MutationController {\n  if (attr === 'html') {\n    if (action === 'append') {\n      return html(selector, val => val + (value ?? ''));\n    } else if (action === 'set') {\n      return html(selector, () => value ?? '');\n    }\n  } else if (attr === 'class') {\n    if (action === 'append') {\n      return classes(selector, val => {\n        if (value) val.add(value);\n      });\n    } else if (action === 'remove') {\n      return classes(selector, val => {\n        if (value) val.delete(value);\n      });\n    } else if (action === 'set') {\n      return classes(selector, val => {\n        val.clear();\n        if (value) val.add(value);\n      });\n    }\n  } else if (attr === 'position') {\n    if (action === 'set' && parentSelector) {\n      return position(selector, () => ({\n        insertBeforeSelector,\n        parentSelector,\n      }));\n    }\n  } else {\n    if (action === 'append') {\n      return attribute(selector, attr, val =>\n        val !== null ? val + (value ?? '') : value ?? ''\n      );\n    } else if (action === 'set') {\n      return attribute(selector, attr, () => value ?? '');\n    } else if (action === 'remove') {\n      return attribute(selector, attr, () => null);\n    }\n  }\n  return nullController;\n}\n\nexport type MutationController = {\n  revert: () => void;\n};\n\nexport type DeclarativeMutation = {\n  selector: string;\n  attribute: string;\n  action: 'append' | 'set' | 'remove';\n  value?: string;\n  parentSelector?: string;\n  insertBeforeSelector?: string;\n};\n\nexport default {\n  html,\n  classes,\n  attribute,\n  position,\n  declarative,\n};\n"],"names":["validAttributeName","nullController","revert","elements","Map","mutations","Set","getObserverInit","attr","childList","subtree","attributes","characterData","attributeFilter","getElementRecord","element","record","get","set","createElementPropertyRecord","el","getCurrentValue","setValue","mutationRunner","currentValue","isDirty","originalValue","virtualValue","_positionTimeout","observer","MutationObserver","paused","setTimeout","parentNode","insertBeforeNode","observe","queueIfNeeded","val","currentVal","runDOMUpdates","htmlMutationRunner","forEach","m","mutate","getTransformedHTML","classMutationRunner","split","filter","Boolean","Array","from","join","attrMutationRunner","_loadDOMNodes","parentSelector","insertBeforeSelector","document","querySelector","positionMutationRunner","selectors","newNodes","getHTMLValue","innerHTML","setHTMLValue","value","getElementHTMLRecord","elementRecord","html","getElementPosition","parentElement","nextElementSibling","setElementPosition","contains","insertBefore","getElementPositionRecord","position","setClassValue","className","removeAttribute","getClassValue","getElementClassRecord","classes","getAttrValue","attrName","getAttribute","setAttrValue","setAttribute","getElementAttributeRecord","deleteElementPropertyRecord","disconnect","transformContainer","createElement","setPropertyValue","length","Object","keys","startMutating","mutation","kind","attribute","push","stopMutating","index","indexOf","splice","refreshElementsSet","size","existingElements","matchingElements","querySelectorAll","selector","has","add","revertMutation","clear","refreshAllElementSets","pauseGlobalObserver","isGlobalObserverPaused","resumeGlobalObserver","disconnectGlobalObserver","connectGlobalObserver","documentElement","getHtmlMutationRecordsFromSelector","records","newMutation","test","classnames","mutatedClassnames","c","declarative","action"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"dom-mutator.esm.js","sources":["../src/index.ts"],"sourcesContent":["export const validAttributeName = /^[a-zA-Z:_][a-zA-Z0-9:_.-]*$/;\nconst nullController: MutationController = {\n  revert: () => {},\n};\n\nconst elements: Map<Element, ElementRecord> = new Map();\nconst mutations: Set<Mutation> = new Set();\n\nfunction getObserverInit(attr: string): MutationObserverInit {\n  return attr === 'html'\n    ? {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        characterData: true,\n      }\n    : {\n        childList: false,\n        subtree: false,\n        attributes: true,\n        attributeFilter: [attr],\n      };\n}\n\nfunction getElementRecord(element: Element): ElementRecord {\n  let record = elements.get(element);\n\n  if (!record) {\n    record = { element, attributes: {} };\n    elements.set(element, record);\n  }\n\n  return record;\n}\nfunction createElementPropertyRecord(\n  el: Element,\n  attr: string,\n  getCurrentValue: (el: Element) => any,\n  setValue: (el: Element, val: any) => void,\n  mutationRunner: (record: ElementPropertyRecord<any, any>) => void\n) {\n  const currentValue = getCurrentValue(el);\n  const record: ElementPropertyRecord<any, any> = {\n    isDirty: false,\n    originalValue: currentValue,\n    virtualValue: currentValue,\n    mutations: [],\n    el,\n    _positionTimeout: null,\n    _textTimeout: null,\n    observer: new MutationObserver(() => {\n      // enact a 1 second timeout that blocks subsequent firing of the\n      // observer until the timeout is complete. This will prevent multiple\n      // mutations from firing in quick succession, which can cause the\n      // mutation to be reverted before the DOM has a chance to update.\n      if (paused) return;\n      if (attr === 'position' && record._positionTimeout) return;\n      if (attr === 'html' && record._textTimeout) return;\n      else if (attr === 'position')\n        record._positionTimeout = setTimeout(() => {\n          record._positionTimeout = null;\n        }, 1000);\n      else if (attr === 'html')\n        record._textTimeout = setTimeout(() => {\n          record._textTimeout = null;\n        }, 1000);\n\n      const currentValue = getCurrentValue(el);\n      if (\n        attr === 'position' &&\n        currentValue.parentNode === record.virtualValue.parentNode &&\n        currentValue.insertBeforeNode === record.virtualValue.insertBeforeNode\n      )\n        return;\n      if (currentValue === record.virtualValue) return;\n      record.originalValue = currentValue;\n      mutationRunner(record);\n    }),\n    mutationRunner,\n    setValue,\n    getCurrentValue,\n  };\n  if (attr === 'position' && el.parentNode) {\n    record.observer.observe(el.parentNode, {\n      childList: true,\n      subtree: true,\n      attributes: false,\n      characterData: false,\n    });\n  } else {\n    record.observer.observe(el, getObserverInit(attr));\n  }\n  return record;\n}\n\nfunction queueIfNeeded(\n  val: string | null | ElementPositionWithDomNode,\n  record: ElementPropertyRecord<any, any>\n) {\n  const currentVal = record.getCurrentValue(record.el);\n  record.virtualValue = val;\n  if (val && typeof val !== 'string') {\n    if (\n      !currentVal ||\n      val.parentNode !== currentVal.parentNode ||\n      val.insertBeforeNode !== currentVal.insertBeforeNode\n    ) {\n      record.isDirty = true;\n      runDOMUpdates();\n    }\n  } else if (val !== currentVal) {\n    record.isDirty = true;\n    runDOMUpdates();\n  }\n}\n\nfunction htmlMutationRunner(record: HTMLRecord) {\n  let val = record.originalValue;\n  record.mutations.forEach(m => (val = m.mutate(val)));\n  queueIfNeeded(getTransformedHTML(val), record);\n}\nfunction classMutationRunner(record: ClassnameRecord) {\n  const val = new Set(record.originalValue.split(/\\s+/).filter(Boolean));\n  record.mutations.forEach(m => m.mutate(val));\n  queueIfNeeded(\n    Array.from(val)\n      .filter(Boolean)\n      .join(' '),\n    record\n  );\n}\n\nfunction attrMutationRunner(record: AttributeRecord) {\n  let val: string | null = record.originalValue;\n  record.mutations.forEach(m => (val = m.mutate(val)));\n  queueIfNeeded(val, record);\n}\n\nfunction _loadDOMNodes({\n  parentSelector,\n  insertBeforeSelector,\n}: ElementPosition): ElementPositionWithDomNode | null {\n  const parentNode = document.querySelector<HTMLElement>(parentSelector);\n  if (!parentNode) return null;\n  const insertBeforeNode = insertBeforeSelector\n    ? document.querySelector<HTMLElement>(insertBeforeSelector)\n    : null;\n  if (insertBeforeSelector && !insertBeforeNode) return null;\n  return {\n    parentNode,\n    insertBeforeNode,\n  };\n}\n\nfunction positionMutationRunner(record: PositionRecord) {\n  let val = record.originalValue;\n  record.mutations.forEach(m => {\n    const selectors = m.mutate();\n    const newNodes = _loadDOMNodes(selectors);\n    val = newNodes || val;\n  });\n  queueIfNeeded(val, record);\n}\n\nconst getHTMLValue = (el: Element) => el.innerHTML;\nconst setHTMLValue = (el: Element, value: string) => (el.innerHTML = value);\nfunction getElementHTMLRecord(element: Element): HTMLRecord {\n  const elementRecord = getElementRecord(element);\n  if (!elementRecord.html) {\n    elementRecord.html = createElementPropertyRecord(\n      element,\n      'html',\n      getHTMLValue,\n      setHTMLValue,\n      htmlMutationRunner\n    );\n  }\n  return elementRecord.html;\n}\n\nconst getElementPosition = (el: Element): ElementPositionWithDomNode => {\n  return {\n    parentNode: el.parentElement as HTMLElement,\n    insertBeforeNode: el.nextElementSibling as HTMLElement | null,\n  };\n};\nconst setElementPosition = (el: Element, value: ElementPositionWithDomNode) => {\n  if (\n    value.insertBeforeNode &&\n    !value.parentNode.contains(value.insertBeforeNode)\n  ) {\n    // skip position mutation - insertBeforeNode not a child of parent. happens\n    // when mutation observer for indvidual element fires out of order\n    return;\n  }\n  value.parentNode.insertBefore(el, value.insertBeforeNode);\n};\nfunction getElementPositionRecord(element: Element): PositionRecord {\n  const elementRecord = getElementRecord(element);\n  if (!elementRecord.position) {\n    elementRecord.position = createElementPropertyRecord(\n      element,\n      'position',\n      getElementPosition,\n      setElementPosition,\n      positionMutationRunner\n    );\n  }\n  return elementRecord.position;\n}\n\nconst setClassValue = (el: Element, val: string) =>\n  val ? (el.className = val) : el.removeAttribute('class');\nconst getClassValue = (el: Element) => el.className;\nfunction getElementClassRecord(el: Element): ClassnameRecord {\n  const elementRecord = getElementRecord(el);\n  if (!elementRecord.classes) {\n    elementRecord.classes = createElementPropertyRecord(\n      el,\n      'class',\n      getClassValue,\n      setClassValue,\n      classMutationRunner\n    );\n  }\n  return elementRecord.classes;\n}\n\nconst getAttrValue = (attrName: string) => (el: Element) =>\n  el.getAttribute(attrName) ?? null;\nconst setAttrValue = (attrName: string) => (el: Element, val: string | null) =>\n  val !== null ? el.setAttribute(attrName, val) : el.removeAttribute(attrName);\nfunction getElementAttributeRecord(el: Element, attr: string): AttributeRecord {\n  const elementRecord = getElementRecord(el);\n  if (!elementRecord.attributes[attr]) {\n    elementRecord.attributes[attr] = createElementPropertyRecord(\n      el,\n      attr,\n      getAttrValue(attr),\n      setAttrValue(attr),\n      attrMutationRunner\n    );\n  }\n  return elementRecord.attributes[attr];\n}\n\nfunction deleteElementPropertyRecord(el: Element, attr: string) {\n  const element = elements.get(el);\n  if (!element) return;\n  if (attr === 'html') {\n    element.html?.observer?.disconnect();\n    delete element.html;\n  } else if (attr === 'class') {\n    element.classes?.observer?.disconnect();\n    delete element.classes;\n  } else if (attr === 'position') {\n    element.position?.observer?.disconnect();\n    delete element.position;\n  } else {\n    element.attributes?.[attr]?.observer?.disconnect();\n    delete element.attributes[attr];\n  }\n}\n\nlet transformContainer: HTMLDivElement;\nfunction getTransformedHTML(html: string) {\n  if (!transformContainer) {\n    transformContainer = document.createElement('div');\n  }\n  transformContainer.innerHTML = html;\n  return transformContainer.innerHTML;\n}\n\nfunction setPropertyValue<T extends ElementPropertyRecord<any, any>>(\n  el: Element,\n  attr: string,\n  m: T\n) {\n  if (!m.isDirty) return;\n  m.isDirty = false;\n  const val = m.virtualValue;\n  if (!m.mutations.length) {\n    deleteElementPropertyRecord(el, attr);\n  }\n  m.setValue(el, val);\n}\n\nfunction setValue(m: ElementRecord, el: Element) {\n  m.html && setPropertyValue<HTMLRecord>(el, 'html', m.html);\n  m.classes && setPropertyValue<ClassnameRecord>(el, 'class', m.classes);\n  m.position && setPropertyValue<PositionRecord>(el, 'position', m.position);\n  Object.keys(m.attributes).forEach(attr => {\n    setPropertyValue<AttributeRecord>(el, attr, m.attributes[attr]);\n  });\n}\n\nfunction runDOMUpdates() {\n  elements.forEach(setValue);\n}\n\n// find or create ElementPropertyRecord, add mutation to it, then run\nfunction startMutating(mutation: Mutation, element: Element) {\n  let record: ElementPropertyRecord<any, any> | null = null;\n  if (mutation.kind === 'html') {\n    record = getElementHTMLRecord(element);\n  } else if (mutation.kind === 'class') {\n    record = getElementClassRecord(element);\n  } else if (mutation.kind === 'attribute') {\n    record = getElementAttributeRecord(element, mutation.attribute);\n  } else if (mutation.kind === 'position') {\n    record = getElementPositionRecord(element);\n  }\n  if (!record) return;\n  record.mutations.push(mutation);\n  record.mutationRunner(record);\n}\n\n// get (existing) ElementPropertyRecord, remove mutation from it, then run\nfunction stopMutating(mutation: Mutation, el: Element) {\n  let record: ElementPropertyRecord<any, any> | null = null;\n  if (mutation.kind === 'html') {\n    record = getElementHTMLRecord(el);\n  } else if (mutation.kind === 'class') {\n    record = getElementClassRecord(el);\n  } else if (mutation.kind === 'attribute') {\n    record = getElementAttributeRecord(el, mutation.attribute);\n  } else if (mutation.kind === 'position') {\n    record = getElementPositionRecord(el);\n  }\n  if (!record) return;\n  const index = record.mutations.indexOf(mutation);\n  if (index !== -1) record.mutations.splice(index, 1);\n  record.mutationRunner(record);\n}\n\n// maintain list of elements associated with mutation\nfunction refreshElementsSet(mutation: Mutation) {\n  // if a position mutation has already found an element to move, don't move\n  // any more elements\n  if (mutation.kind === 'position' && mutation.elements.size === 1) return;\n\n  const existingElements = new Set(mutation.elements);\n  const matchingElements = document.querySelectorAll(mutation.selector);\n  matchingElements.forEach(el => {\n    if (!existingElements.has(el)) {\n      mutation.elements.add(el);\n      startMutating(mutation, el);\n    }\n  });\n}\n\nfunction revertMutation(mutation: Mutation) {\n  mutation.elements.forEach(el => stopMutating(mutation, el));\n  mutation.elements.clear();\n  mutations.delete(mutation);\n}\n\nfunction refreshAllElementSets() {\n  mutations.forEach(refreshElementsSet);\n}\n\n// pause/resume global observer\nlet paused: boolean = false;\nexport function pauseGlobalObserver() {\n  paused = true;\n}\nexport function isGlobalObserverPaused() {\n  return paused;\n}\nexport function resumeGlobalObserver() {\n  paused = false;\n  refreshAllElementSets();\n}\n\n// Observer for elements that don't exist in the DOM yet\nlet observer: MutationObserver;\n\nexport function disconnectGlobalObserver() {\n  observer && observer.disconnect();\n}\nexport function connectGlobalObserver() {\n  if (typeof document === 'undefined') return;\n  if (!observer) {\n    observer = new MutationObserver(() => {\n      refreshAllElementSets();\n    });\n  }\n  refreshAllElementSets();\n  observer.observe(document.documentElement, {\n    childList: true,\n    subtree: true,\n    attributes: false,\n    characterData: false,\n  });\n}\n// run on init\nconnectGlobalObserver();\n\nexport const getHtmlMutationRecordsFromSelector = (selector: string) => {\n  const elements = document.querySelectorAll(selector);\n  const records: HTMLRecord[] = [];\n  elements.forEach(el => {\n    const record = getElementHTMLRecord(el);\n    if (record) records.push(record);\n  });\n  return records;\n};\n\nfunction newMutation(m: Mutation): MutationController {\n  // Not in a browser\n  if (typeof document === 'undefined') return nullController;\n  // add to global index of mutations\n  mutations.add(m);\n  // run refresh on init to establish list of elements associated w/ mutation\n  refreshElementsSet(m);\n  return {\n    revert: () => {\n      revertMutation(m);\n    },\n  };\n}\n\nfunction html(\n  selector: HTMLMutation['selector'],\n  mutate: HTMLMutation['mutate']\n) {\n  return newMutation({\n    kind: 'html',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction position(\n  selector: PositionMutation['selector'],\n  mutate: PositionMutation['mutate']\n) {\n  return newMutation({\n    kind: 'position',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction classes(\n  selector: ClassnameMutation['selector'],\n  mutate: ClassnameMutation['mutate']\n) {\n  return newMutation({\n    kind: 'class',\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction attribute(\n  selector: AttrMutation['selector'],\n  attribute: AttrMutation['attribute'],\n  mutate: AttrMutation['mutate']\n) {\n  if (!validAttributeName.test(attribute)) return nullController;\n\n  if (attribute === 'class' || attribute === 'className') {\n    return classes(selector, classnames => {\n      const mutatedClassnames = mutate(Array.from(classnames).join(' '));\n      classnames.clear();\n      if (!mutatedClassnames) return;\n      mutatedClassnames\n        .split(/\\s+/g)\n        .filter(Boolean)\n        .forEach(c => classnames.add(c));\n    });\n  }\n\n  return newMutation({\n    kind: 'attribute',\n    attribute,\n    elements: new Set(),\n    mutate,\n    selector,\n  });\n}\n\nfunction declarative({\n  selector,\n  action,\n  value,\n  attribute: attr,\n  parentSelector,\n  insertBeforeSelector,\n}: DeclarativeMutation): MutationController {\n  if (attr === 'html') {\n    if (action === 'append') {\n      return html(selector, val => val + (value ?? ''));\n    } else if (action === 'set') {\n      return html(selector, () => value ?? '');\n    }\n  } else if (attr === 'class') {\n    if (action === 'append') {\n      return classes(selector, val => {\n        if (value) val.add(value);\n      });\n    } else if (action === 'remove') {\n      return classes(selector, val => {\n        if (value) val.delete(value);\n      });\n    } else if (action === 'set') {\n      return classes(selector, val => {\n        val.clear();\n        if (value) val.add(value);\n      });\n    }\n  } else if (attr === 'position') {\n    if (action === 'set' && parentSelector) {\n      return position(selector, () => ({\n        insertBeforeSelector,\n        parentSelector,\n      }));\n    }\n  } else {\n    if (action === 'append') {\n      return attribute(selector, attr, val =>\n        val !== null ? val + (value ?? '') : value ?? ''\n      );\n    } else if (action === 'set') {\n      return attribute(selector, attr, () => value ?? '');\n    } else if (action === 'remove') {\n      return attribute(selector, attr, () => null);\n    }\n  }\n  return nullController;\n}\n\nexport type MutationController = {\n  revert: () => void;\n};\n\nexport type DeclarativeMutation = {\n  selector: string;\n  attribute: string;\n  action: 'append' | 'set' | 'remove';\n  value?: string;\n  parentSelector?: string;\n  insertBeforeSelector?: string;\n};\n\nexport default {\n  html,\n  classes,\n  attribute,\n  position,\n  declarative,\n};\n"],"names":["validAttributeName","nullController","revert","elements","Map","mutations","Set","getObserverInit","attr","childList","subtree","attributes","characterData","attributeFilter","getElementRecord","element","record","get","set","createElementPropertyRecord","el","getCurrentValue","setValue","mutationRunner","currentValue","isDirty","originalValue","virtualValue","_positionTimeout","_textTimeout","observer","MutationObserver","paused","setTimeout","parentNode","insertBeforeNode","observe","queueIfNeeded","val","currentVal","runDOMUpdates","htmlMutationRunner","forEach","m","mutate","getTransformedHTML","classMutationRunner","split","filter","Boolean","Array","from","join","attrMutationRunner","_loadDOMNodes","_ref","parentSelector","insertBeforeSelector","document","querySelector","positionMutationRunner","selectors","newNodes","getHTMLValue","innerHTML","setHTMLValue","value","getElementHTMLRecord","elementRecord","html","getElementPosition","parentElement","nextElementSibling","setElementPosition","contains","insertBefore","getElementPositionRecord","position","setClassValue","className","removeAttribute","getClassValue","getElementClassRecord","classes","getAttrValue","attrName","_el$getAttribute","getAttribute","setAttrValue","setAttribute","getElementAttributeRecord","deleteElementPropertyRecord","_element$html","disconnect","_element$classes","_element$position","_element$attributes","transformContainer","createElement","setPropertyValue","length","Object","keys","startMutating","mutation","kind","attribute","push","stopMutating","index","indexOf","splice","refreshElementsSet","size","existingElements","matchingElements","querySelectorAll","selector","has","add","revertMutation","clear","refreshAllElementSets","pauseGlobalObserver","isGlobalObserverPaused","resumeGlobalObserver","disconnectGlobalObserver","connectGlobalObserver","documentElement","getHtmlMutationRecordsFromSelector","records","newMutation","test","classnames","mutatedClassnames","c","declarative","_ref2","action"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/dom-mutator/dist/examples/react-app/amplitude-integration/src/App.d.ts b/node_modules/dom-mutator/dist/examples/react-app/amplitude-integration/src/App.d.ts
new file mode 100644
index 0000000..b4b7504
--- /dev/null
diff --git a/node_modules/dom-mutator/src/index.ts b/node_modules/dom-mutator/src/index.ts
index a19dbda..be6766c 100644
--- a/node_modules/dom-mutator/src/index.ts
+++ b/node_modules/dom-mutator/src/index.ts
@@ -47,6 +47,7 @@ function createElementPropertyRecord(
     mutations: [],
     el,
     _positionTimeout: null,
+    _textTimeout: null,
     observer: new MutationObserver(() => {
       // enact a 1 second timeout that blocks subsequent firing of the
       // observer until the timeout is complete. This will prevent multiple
@@ -54,10 +55,15 @@ function createElementPropertyRecord(
       // mutation to be reverted before the DOM has a chance to update.
       if (paused) return;
       if (attr === 'position' && record._positionTimeout) return;
+      if (attr === 'html' && record._textTimeout) return;
       else if (attr === 'position')
         record._positionTimeout = setTimeout(() => {
           record._positionTimeout = null;
         }, 1000);
+      else if (attr === 'html')
+        record._textTimeout = setTimeout(() => {
+          record._textTimeout = null;
+        }, 1000);

       const currentValue = getCurrentValue(el);
       if (
diff --git a/node_modules/dom-mutator/src/types.ts b/node_modules/dom-mutator/src/types.ts
index cdc03eb..3463c30 100644
--- a/node_modules/dom-mutator/src/types.ts
+++ b/node_modules/dom-mutator/src/types.ts
@@ -43,6 +43,7 @@ type MutationKind = Mutation['kind'];

 interface ElementPropertyRecord<T, V> {
   _positionTimeout: NodeJS.Timeout | number | null;
+  _textTimeout: NodeJS.Timeout | number | null;
   observer: MutationObserver;
   originalValue: V;
   virtualValue: V;
